// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({
      name: 'heading',
      type: 'string',
      title: 'Heading',
      hidden: false,
      validation: (Rule) => Rule.required().max(255),
    }),
    defineField({
      name: 'authors',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'blog'}, {type: 'author'}],
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      description: 'Help',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'likes',
      type: 'number',
      title: 'Likes',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'score', type: 'number', title: 'Score', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'featured', type: 'boolean', title: 'Featured', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({
      name: 'gallery',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Gallery',
      hidden: false,
    }),
  ],
  preview: {select: {title: 'heading'}},
})

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'avatar', type: 'image', title: 'Avatar', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\w[\w.-]*@([\w-]+\.)+[\w-]+$/, {invert: false}),
    }),
  ],
  preview: {select: {title: 'name'}},
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [blogType, authorType, breakType] satisfies SchemaTypeDefinition[]
