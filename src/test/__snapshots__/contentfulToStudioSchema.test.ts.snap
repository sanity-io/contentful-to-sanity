// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`contentfulToStudioSchema > 11ty.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'components',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'bannerBlock'},
            {type: 'cardBlock'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'footerBlock'},
          ],
        },
      ],
      title: 'Components',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const contentBlockType = defineType({
  type: 'document',
  name: 'contentBlock',
  title: 'Content Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const featuretteBlockType = defineType({
  type: 'document',
  name: 'featuretteBlock',
  title: 'Featurette Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({name: 'imageLocation', type: 'boolean', title: 'Image Location', hidden: false}),
    defineField({
      name: 'image',
      type: 'image',
      title: 'image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardBlockType = defineType({
  type: 'document',
  name: 'cardBlock',
  title: 'Card Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'cards',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'card'}]}],
      title: 'Cards',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardType = defineType({
  type: 'document',
  name: 'card',
  title: 'Card',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      name: 'image',
      type: 'image',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const bannerBlockType = defineType({
  type: 'document',
  name: 'bannerBlock',
  title: 'Banner Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'page'},
                {type: 'contentBlock'},
                {type: 'featuretteBlock'},
                {type: 'cardBlock'},
                {type: 'card'},
                {type: 'bannerBlock'},
                {type: 'footerBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'page'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'cardBlock'},
            {type: 'card'},
            {type: 'bannerBlock'},
            {type: 'footerBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerBlockType = defineType({
  type: 'document',
  name: 'footerBlock',
  title: 'Footer Block',
  description: '',
  fields: [
    defineField({
      name: 'sectionTitle',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  pageType,
  contentBlockType,
  featuretteBlockType,
  cardBlockType,
  cardType,
  bannerBlockType,
  footerBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > 11ty.json 2`] = `
"// generated by contentful-to-sanity

export const pageType = {
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'components',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'bannerBlock'},
            {type: 'cardBlock'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'footerBlock'},
          ],
        },
      ],
      title: 'Components',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const contentBlockType = {
  type: 'document',
  name: 'contentBlock',
  title: 'Content Block',
  description: '',
  fields: [
    {name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false},
    {
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    },
    {
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const featuretteBlockType = {
  type: 'document',
  name: 'featuretteBlock',
  title: 'Featurette Block',
  description: '',
  fields: [
    {name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false},
    {
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    },
    {
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    },
    {name: 'imageLocation', type: 'boolean', title: 'Image Location', hidden: false},
    {
      name: 'image',
      type: 'image',
      title: 'image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const cardBlockType = {
  type: 'document',
  name: 'cardBlock',
  title: 'Card Block',
  description: '',
  fields: [
    {name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false},
    {
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    },
    {
      name: 'cards',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'card'}]}],
      title: 'Cards',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const cardType = {
  type: 'document',
  name: 'card',
  title: 'Card',
  description: '',
  fields: [
    {name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false},
    {
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    },
    {
      name: 'image',
      type: 'image',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const bannerBlockType = {
  type: 'document',
  name: 'bannerBlock',
  title: 'Banner Block',
  description: '',
  fields: [
    {name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false},
    {
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    },
    {
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'page'},
                {type: 'contentBlock'},
                {type: 'featuretteBlock'},
                {type: 'cardBlock'},
                {type: 'card'},
                {type: 'bannerBlock'},
                {type: 'footerBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'page'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'cardBlock'},
            {type: 'card'},
            {type: 'bannerBlock'},
            {type: 'footerBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const footerBlockType = {
  type: 'document',
  name: 'footerBlock',
  title: 'Footer Block',
  description: '',
  fields: [
    {
      name: 'sectionTitle',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'content',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'sectionLink',
      type: 'slug',
      title: 'section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  pageType,
  contentBlockType,
  featuretteBlockType,
  cardBlockType,
  cardType,
  bannerBlockType,
  footerBlockType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > 11ty.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'components',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'bannerBlock'},
            {type: 'cardBlock'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'footerBlock'},
          ],
        },
      ],
      title: 'Components',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const contentBlockType = defineType({
  type: 'document',
  name: 'contentBlock',
  title: 'Content Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const featuretteBlockType = defineType({
  type: 'document',
  name: 'featuretteBlock',
  title: 'Featurette Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({name: 'imageLocation', type: 'boolean', title: 'Image Location', hidden: false}),
    defineField({
      name: 'image',
      type: 'image',
      title: 'image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardBlockType = defineType({
  type: 'document',
  name: 'cardBlock',
  title: 'Card Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'cards',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'card'}]}],
      title: 'Cards',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardType = defineType({
  type: 'document',
  name: 'card',
  title: 'Card',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      name: 'image',
      type: 'image',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const bannerBlockType = defineType({
  type: 'document',
  name: 'bannerBlock',
  title: 'Banner Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'page'},
                {type: 'contentBlock'},
                {type: 'featuretteBlock'},
                {type: 'cardBlock'},
                {type: 'card'},
                {type: 'bannerBlock'},
                {type: 'footerBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'page'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'cardBlock'},
            {type: 'card'},
            {type: 'bannerBlock'},
            {type: 'footerBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerBlockType = defineType({
  type: 'document',
  name: 'footerBlock',
  title: 'Footer Block',
  description: '',
  fields: [
    defineField({
      name: 'sectionTitle',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  pageType,
  contentBlockType,
  featuretteBlockType,
  cardBlockType,
  cardType,
  bannerBlockType,
  footerBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > 11ty.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'components',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'bannerBlock'},
            {type: 'cardBlock'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'footerBlock'},
          ],
        },
      ],
      title: 'Components',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const contentBlockType = defineType({
  type: 'document',
  name: 'contentBlock',
  title: 'Content Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const featuretteBlockType = defineType({
  type: 'document',
  name: 'featuretteBlock',
  title: 'Featurette Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({name: 'imageLocation', type: 'boolean', title: 'Image Location', hidden: false}),
    defineField({
      name: 'image',
      type: 'image',
      title: 'image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardBlockType = defineType({
  type: 'document',
  name: 'cardBlock',
  title: 'Card Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'cards',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'card'}]}],
      title: 'Cards',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const cardType = defineType({
  type: 'document',
  name: 'card',
  title: 'Card',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'content',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      name: 'image',
      type: 'image',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const bannerBlockType = defineType({
  type: 'document',
  name: 'bannerBlock',
  title: 'Banner Block',
  description: '',
  fields: [
    defineField({name: 'sectionTitle', type: 'string', title: 'Section Title', hidden: false}),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'Section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'page'},
                {type: 'contentBlock'},
                {type: 'featuretteBlock'},
                {type: 'cardBlock'},
                {type: 'card'},
                {type: 'bannerBlock'},
                {type: 'footerBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'page'},
            {type: 'contentBlock'},
            {type: 'featuretteBlock'},
            {type: 'cardBlock'},
            {type: 'card'},
            {type: 'bannerBlock'},
            {type: 'footerBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerBlockType = defineType({
  type: 'document',
  name: 'footerBlock',
  title: 'Footer Block',
  description: '',
  fields: [
    defineField({
      name: 'sectionTitle',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'content',
      type: 'text',
      title: 'content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sectionLink',
      type: 'slug',
      title: 'section Link',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'sectionTitle'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'sectionTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  pageType,
  contentBlockType,
  featuretteBlockType,
  cardBlockType,
  cardType,
  bannerBlockType,
  footerBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > blog.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({
      name: 'heading',
      type: 'string',
      title: 'Heading',
      hidden: false,
      validation: (Rule) => Rule.required().max(255),
    }),
    defineField({
      name: 'authors',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'blog'}, {type: 'author'}],
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'blog'}, {type: 'author'}]}],
        },
        {type: 'reference', to: [{type: 'blog'}, {type: 'author'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      description: 'Help',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'likes',
      type: 'number',
      title: 'Likes',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'score', type: 'number', title: 'Score', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'featured', type: 'boolean', title: 'Featured', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({
      name: 'gallery',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Gallery',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'heading'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'avatar', type: 'image', title: 'Avatar', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\\\\w[\\\\w.-]*@([\\\\w-]+\\\\.)+[\\\\w-]+$/, {invert: false}),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [blogType, authorType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > blog.json 2`] = `
"// generated by contentful-to-sanity

export const blogType = {
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    {
      name: 'heading',
      type: 'string',
      title: 'Heading',
      hidden: false,
      validation: (Rule) => Rule.required().max(255),
    },
    {
      name: 'authors',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'blog'}, {type: 'author'}],
    },
    {
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'blog'}, {type: 'author'}]}],
        },
        {type: 'reference', to: [{type: 'blog'}, {type: 'author'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      description: 'Help',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'likes',
      type: 'number',
      title: 'Likes',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    },
    {name: 'score', type: 'number', title: 'Score', hidden: false},
    {name: 'date', type: 'datetime', title: 'Date', hidden: false, options: {timeFormat: 'H:mmZ'}},
    {name: 'featured', type: 'boolean', title: 'Featured', hidden: false},
    {name: 'location', type: 'geopoint', title: 'Location', hidden: false},
    {name: 'gallery', type: 'array', of: [{type: 'file'}], title: 'Gallery', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'heading'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const authorType = {
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'avatar', type: 'image', title: 'Avatar', hidden: false},
    {
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\\\\w[\\\\w.-]*@([\\\\w-]+\\\\.)+[\\\\w-]+$/, {invert: false}),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [blogType, authorType, breakType]
"
`;

exports[`contentfulToStudioSchema > blog.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({
      name: 'heading',
      type: 'string',
      title: 'Heading',
      hidden: false,
      validation: (Rule) => Rule.required().max(255),
    }),
    defineField({
      name: 'authors',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'blog'}, {type: 'author'}],
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'blog'}, {type: 'author'}]}],
        },
        {type: 'reference', to: [{type: 'blog'}, {type: 'author'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      description: 'Help',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'likes',
      type: 'number',
      title: 'Likes',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'score', type: 'number', title: 'Score', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'featured', type: 'boolean', title: 'Featured', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({
      name: 'gallery',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Gallery',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'heading'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'avatar', type: 'image', title: 'Avatar', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\\\\w[\\\\w.-]*@([\\\\w-]+\\\\.)+[\\\\w-]+$/, {invert: false}),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [blogType, authorType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > blog.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({
      name: 'heading',
      type: 'string',
      title: 'Heading',
      hidden: false,
      validation: (Rule) => Rule.required().max(255),
    }),
    defineField({
      name: 'authors',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'blog'}, {type: 'author'}],
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'blog'}, {type: 'author'}]}],
        },
        {type: 'reference', to: [{type: 'blog'}, {type: 'author'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      description: 'Help',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'likes',
      type: 'number',
      title: 'Likes',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'score', type: 'number', title: 'Score', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'featured', type: 'boolean', title: 'Featured', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({
      name: 'gallery',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Gallery',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'heading'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'avatar', type: 'image', title: 'Avatar', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\\\\w[\\\\w.-]*@([\\\\w-]+\\\\.)+[\\\\w-]+$/, {invert: false}),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [blogType, authorType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > categories-demo-export.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.unique(),
      options: {
        list: ['prospective student', 'student', 'faculty', 'employee', 'alumni'],
        layout: 'radio',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const articleType = defineType({
  type: 'document',
  name: 'article',
  title: 'Article',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const eventType = defineType({
  type: 'document',
  name: 'event',
  title: 'Event',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'venue', type: 'string', title: 'Venue', hidden: false}),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  categoriesType,
  articleType,
  eventType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > categories-demo-export.json 2`] = `
"// generated by contentful-to-sanity

export const categoriesType = {
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    {
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.unique(),
      options: {
        list: ['prospective student', 'student', 'faculty', 'employee', 'alumni'],
        layout: 'radio',
      },
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const articleType = {
  type: 'document',
  name: 'article',
  title: 'Article',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'author', type: 'string', title: 'Author', hidden: false},
    {
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
    },
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const eventType = {
  type: 'document',
  name: 'event',
  title: 'Event',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'date', type: 'datetime', title: 'Date', hidden: false, options: {timeFormat: 'H:mmZ'}},
    {name: 'location', type: 'geopoint', title: 'Location', hidden: false},
    {name: 'venue', type: 'string', title: 'Venue', hidden: false},
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [categoriesType, articleType, eventType, breakType]
"
`;

exports[`contentfulToStudioSchema > categories-demo-export.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.unique(),
      options: {
        list: ['prospective student', 'student', 'faculty', 'employee', 'alumni'],
        layout: 'radio',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const articleType = defineType({
  type: 'document',
  name: 'article',
  title: 'Article',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const eventType = defineType({
  type: 'document',
  name: 'event',
  title: 'Event',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'venue', type: 'string', title: 'Venue', hidden: false}),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  categoriesType,
  articleType,
  eventType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > categories-demo-export.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.unique(),
      options: {
        list: ['prospective student', 'student', 'faculty', 'employee', 'alumni'],
        layout: 'radio',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const articleType = defineType({
  type: 'document',
  name: 'article',
  title: 'Article',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const eventType = defineType({
  type: 'document',
  name: 'event',
  title: 'Event',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'venue', type: 'string', title: 'Venue', hidden: false}),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categories'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  categoriesType,
  articleType,
  eventType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > complex-blog.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [personType, blogPostType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > complex-blog.json 2`] = `
"// generated by contentful-to-sanity

export const personType = {
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'email', type: 'string', title: 'Email', hidden: false},
    {name: 'phone', type: 'string', title: 'Phone', hidden: false},
    {name: 'facebook', type: 'string', title: 'Facebook', hidden: false},
    {name: 'twitter', type: 'string', title: 'Twitter', hidden: false},
    {name: 'github', type: 'string', title: 'Github', hidden: false},
    {name: 'image', type: 'file', title: 'Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const blogPostType = {
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'body',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'author', type: 'reference', title: 'Author', hidden: false, to: [{type: 'person'}]},
    {
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    },
    {
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [personType, blogPostType]
"
`;

exports[`contentfulToStudioSchema > complex-blog.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [personType, blogPostType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > complex-blog.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'text',
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'text',
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'text',
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [personType, blogPostType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > cookbook.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const ingredientType = defineType({
  type: 'document',
  name: 'ingredient',
  title: 'Ingredient',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'quantityType',
      type: 'string',
      title: 'Quantity Type',
      hidden: false,
      options: {
        list: [
          'Loose',
          'Cup(s)',
          'Can',
          'kg',
          'grams',
          'ml',
          'liter(s)',
          'Tea Spoon',
          'Table Spoon',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const recipeType = defineType({
  type: 'document',
  name: 'recipe',
  title: 'Recipe',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'ingredients',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
            ],
            annotations: [],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]},
      ],
      title: 'Ingredients',
      hidden: false,
    }),
    defineField({
      name: 'instructions',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]}],
        },
        {type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Instructions',
      hidden: false,
    }),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Images',
      hidden: false,
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [ingredientType, recipeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > cookbook.json 2`] = `
"// generated by contentful-to-sanity

export const ingredientType = {
  type: 'document',
  name: 'ingredient',
  title: 'Ingredient',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {
      name: 'quantityType',
      type: 'string',
      title: 'Quantity Type',
      hidden: false,
      options: {
        list: [
          'Loose',
          'Cup(s)',
          'Can',
          'kg',
          'grams',
          'ml',
          'liter(s)',
          'Tea Spoon',
          'Table Spoon',
        ],
        layout: 'dropdown',
      },
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const recipeType = {
  type: 'document',
  name: 'recipe',
  title: 'Recipe',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'description', type: 'string', title: 'Description', hidden: false},
    {
      name: 'ingredients',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
            ],
            annotations: [],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]},
      ],
      title: 'Ingredients',
      hidden: false,
    },
    {
      name: 'instructions',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]}],
        },
        {type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Instructions',
      hidden: false,
    },
    {name: 'images', type: 'array', of: [{type: 'file'}], title: 'Images', hidden: false},
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [ingredientType, recipeType, breakType]
"
`;

exports[`contentfulToStudioSchema > cookbook.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const ingredientType = defineType({
  type: 'document',
  name: 'ingredient',
  title: 'Ingredient',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'quantityType',
      type: 'string',
      title: 'Quantity Type',
      hidden: false,
      options: {
        list: [
          'Loose',
          'Cup(s)',
          'Can',
          'kg',
          'grams',
          'ml',
          'liter(s)',
          'Tea Spoon',
          'Table Spoon',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const recipeType = defineType({
  type: 'document',
  name: 'recipe',
  title: 'Recipe',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'ingredients',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
            ],
            annotations: [],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]},
      ],
      title: 'Ingredients',
      hidden: false,
    }),
    defineField({
      name: 'instructions',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]}],
        },
        {type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Instructions',
      hidden: false,
    }),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Images',
      hidden: false,
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [ingredientType, recipeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > cookbook.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const ingredientType = defineType({
  type: 'document',
  name: 'ingredient',
  title: 'Ingredient',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'quantityType',
      type: 'string',
      title: 'Quantity Type',
      hidden: false,
      options: {
        list: [
          'Loose',
          'Cup(s)',
          'Can',
          'kg',
          'grams',
          'ml',
          'liter(s)',
          'Tea Spoon',
          'Table Spoon',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const recipeType = defineType({
  type: 'document',
  name: 'recipe',
  title: 'Recipe',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'ingredients',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
            ],
            annotations: [],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'ingredient'}]},
      ],
      title: 'Ingredients',
      hidden: false,
    }),
    defineField({
      name: 'instructions',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]}],
        },
        {type: 'reference', to: [{type: 'ingredient'}, {type: 'recipe'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Instructions',
      hidden: false,
    }),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Images',
      hidden: false,
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [ingredientType, recipeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gallery.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: 'This content type defines the structure of an author entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const imageType = defineType({
  type: 'document',
  name: 'image',
  title: 'Image',
  description: 'This content type defines the structure of an image entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const photoGalleryType = defineType({
  type: 'document',
  name: 'photoGallery',
  title: 'Photo Gallery',
  description: 'This content type defines the structure of a gallery entry',
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({name: 'coverImage', type: 'file', title: 'Cover Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'image'}]}],
      title: 'Images',
      hidden: false,
      options: {layout: 'grid'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
    }),
    defineField({name: 'date', type: 'date', title: 'Date', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: true}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [authorType, imageType, photoGalleryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gallery.json 2`] = `
"// generated by contentful-to-sanity

export const authorType = {
  type: 'document',
  name: 'author',
  title: 'Author',
  description: 'This content type defines the structure of an author entry',
  fields: [
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const imageType = {
  type: 'document',
  name: 'image',
  title: 'Image',
  description: 'This content type defines the structure of an image entry',
  fields: [
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const photoGalleryType = {
  type: 'document',
  name: 'photoGallery',
  title: 'Photo Gallery',
  description: 'This content type defines the structure of a gallery entry',
  fields: [
    {
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'slug', type: 'slug', title: 'Slug', hidden: false, options: {source: 'title'}},
    {
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    },
    {name: 'coverImage', type: 'file', title: 'Cover Image', hidden: false},
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'images',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'image'}]}],
      title: 'Images',
      hidden: false,
      options: {layout: 'grid'},
    },
    {name: 'tags', type: 'array', of: [{type: 'string'}], title: 'Tags', hidden: false},
    {name: 'date', type: 'date', title: 'Date', hidden: false},
    {name: 'location', type: 'geopoint', title: 'Location', hidden: true},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [authorType, imageType, photoGalleryType]
"
`;

exports[`contentfulToStudioSchema > gallery.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: 'This content type defines the structure of an author entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const imageType = defineType({
  type: 'document',
  name: 'image',
  title: 'Image',
  description: 'This content type defines the structure of an image entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const photoGalleryType = defineType({
  type: 'document',
  name: 'photoGallery',
  title: 'Photo Gallery',
  description: 'This content type defines the structure of a gallery entry',
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({name: 'coverImage', type: 'file', title: 'Cover Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'image'}]}],
      title: 'Images',
      hidden: false,
      options: {layout: 'grid'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
    }),
    defineField({name: 'date', type: 'date', title: 'Date', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: true}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [authorType, imageType, photoGalleryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gallery.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: 'This content type defines the structure of an author entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const imageType = defineType({
  type: 'document',
  name: 'image',
  title: 'Image',
  description: 'This content type defines the structure of an image entry',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const photoGalleryType = defineType({
  type: 'document',
  name: 'photoGallery',
  title: 'Photo Gallery',
  description: 'This content type defines the structure of a gallery entry',
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({name: 'coverImage', type: 'file', title: 'Cover Image', hidden: false}),
    defineField({name: 'description', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'images',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'image'}]}],
      title: 'Images',
      hidden: false,
      options: {layout: 'grid'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
    }),
    defineField({name: 'date', type: 'date', title: 'Date', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: true}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [authorType, imageType, photoGalleryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog.json 2`] = `
"// generated by contentful-to-sanity

export const personType = {
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'email', type: 'string', title: 'Email', hidden: false},
    {name: 'phone', type: 'string', title: 'Phone', hidden: false},
    {name: 'facebook', type: 'string', title: 'Facebook', hidden: false},
    {name: 'twitter', type: 'string', title: 'Twitter', hidden: false},
    {name: 'github', type: 'string', title: 'Github', hidden: false},
    {name: 'image', type: 'file', title: 'Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const blogPostType = {
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'author', type: 'reference', title: 'Author', hidden: false, to: [{type: 'person'}]},
    {
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    },
    {
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [personType, blogPostType, breakType]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'heroImage',
      type: 'file',
      title: 'Hero Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog2.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog2.json 2`] = `
"// generated by contentful-to-sanity

export const personType = {
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'email', type: 'string', title: 'Email', hidden: false},
    {name: 'phone', type: 'string', title: 'Phone', hidden: false},
    {name: 'facebook', type: 'string', title: 'Facebook', hidden: false},
    {name: 'twitter', type: 'string', title: 'Twitter', hidden: false},
    {name: 'github', type: 'string', title: 'Github', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const blogPostType = {
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'author', type: 'reference', title: 'Author', hidden: false, to: [{type: 'person'}]},
    {
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    },
    {
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [personType, blogPostType, breakType]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog2.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > gatsby-blog2.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'company',
      type: 'string',
      title: 'Company',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortBio',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Short Bio',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({name: 'phone', type: 'string', title: 'Phone', hidden: false}),
    defineField({name: 'facebook', type: 'string', title: 'Facebook', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'github', type: 'string', title: 'Github', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogPostType = defineType({
  type: 'document',
  name: 'blogPost',
  title: 'Blog Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'publishDate',
      type: 'datetime',
      title: 'Publish Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string', options: {list: ['general', 'javascript', 'static-sites']}}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, blogPostType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > hydrogen-store.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: null,
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({name: 'website', type: 'string', title: 'Website', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: null,
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'handle', type: 'string', title: 'Handle', hidden: false}),
    defineField({
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      name: 'recommendations',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Recommendations',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'icon', type: 'file', title: 'Icon', hidden: false}),
    defineField({
      name: 'categoryDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [brandType, productType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > hydrogen-store.json 2`] = `
"// generated by contentful-to-sanity

export const brandType = {
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: null,
  fields: [
    {
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'logo', type: 'file', title: 'Logo', hidden: false},
    {
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {name: 'website', type: 'string', title: 'Website', hidden: false},
    {name: 'twitter', type: 'string', title: 'Twitter', hidden: false},
    {name: 'email', type: 'string', title: 'Email', hidden: false},
    {name: 'phone', type: 'array', of: [{type: 'string'}], title: 'Phone #', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const productType = {
  type: 'document',
  name: 'product',
  title: 'Product',
  description: null,
  fields: [
    {
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'handle', type: 'string', title: 'Handle', hidden: false},
    {
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {name: 'image', type: 'array', of: [{type: 'file'}], title: 'Image', hidden: false},
    {
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    },
    {
      name: 'recommendations',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Recommendations',
      hidden: false,
    },
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const categoryType = {
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    {
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'icon', type: 'file', title: 'Icon', hidden: false},
    {
      name: 'categoryDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [brandType, productType, categoryType]
"
`;

exports[`contentfulToStudioSchema > hydrogen-store.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: null,
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({name: 'website', type: 'string', title: 'Website', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: null,
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'handle', type: 'string', title: 'Handle', hidden: false}),
    defineField({
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      name: 'recommendations',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Recommendations',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'icon', type: 'file', title: 'Icon', hidden: false}),
    defineField({
      name: 'categoryDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [brandType, productType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > hydrogen-store.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: null,
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({name: 'website', type: 'string', title: 'Website', hidden: false}),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({name: 'email', type: 'string', title: 'Email', hidden: false}),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: null,
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'handle', type: 'string', title: 'Handle', hidden: false}),
    defineField({name: 'productDescription', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      name: 'recommendations',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Recommendations',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'icon', type: 'file', title: 'Icon', hidden: false}),
    defineField({
      name: 'categoryDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [brandType, productType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > jumpstart-shop.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'for adding products',
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [
                      {type: 'product'},
                      {type: 'productSection'},
                      {type: 'category'},
                      {type: 'landingPage'},
                    ],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'product'},
                {type: 'productSection'},
                {type: 'category'},
                {type: 'landingPage'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'product'},
            {type: 'productSection'},
            {type: 'category'},
            {type: 'landingPage'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'price',
      type: 'number',
      title: 'Price',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productSectionType = defineType({
  type: 'document',
  name: 'productSection',
  title: 'Product Section',
  description: null,
  fields: [
    defineField({name: 'internalName', type: 'string', title: 'Internal Name', hidden: false}),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'products',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Products',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const landingPageType = defineType({
  type: 'document',
  name: 'landingPage',
  title: 'Landing Page',
  description: null,
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productSection'}]}],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  productType,
  productSectionType,
  categoryType,
  landingPageType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > jumpstart-shop.json 2`] = `
"// generated by contentful-to-sanity

export const productType = {
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'for adding products',
  fields: [
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    },
    {
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  {
                    type: 'reference',
                    name: 'reference',
                    to: [
                      {type: 'product'},
                      {type: 'productSection'},
                      {type: 'category'},
                      {type: 'landingPage'},
                    ],
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'product'},
                {type: 'productSection'},
                {type: 'category'},
                {type: 'landingPage'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'product'},
            {type: 'productSection'},
            {type: 'category'},
            {type: 'landingPage'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'price',
      type: 'number',
      title: 'Price',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const productSectionType = {
  type: 'document',
  name: 'productSection',
  title: 'Product Section',
  description: null,
  fields: [
    {name: 'internalName', type: 'string', title: 'Internal Name', hidden: false},
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'products',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Products',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const categoryType = {
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'description', type: 'string', title: 'Description', hidden: false},
    {name: 'image', type: 'file', title: 'Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const landingPageType = {
  type: 'document',
  name: 'landingPage',
  title: 'Landing Page',
  description: null,
  fields: [
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'sections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productSection'}]}],
      title: 'Sections',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [productType, productSectionType, categoryType, landingPageType]
"
`;

exports[`contentfulToStudioSchema > jumpstart-shop.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'for adding products',
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [
                      {type: 'product'},
                      {type: 'productSection'},
                      {type: 'category'},
                      {type: 'landingPage'},
                    ],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'product'},
                {type: 'productSection'},
                {type: 'category'},
                {type: 'landingPage'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'product'},
            {type: 'productSection'},
            {type: 'category'},
            {type: 'landingPage'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'price',
      type: 'number',
      title: 'Price',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productSectionType = defineType({
  type: 'document',
  name: 'productSection',
  title: 'Product Section',
  description: null,
  fields: [
    defineField({name: 'internalName', type: 'string', title: 'Internal Name', hidden: false}),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'products',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Products',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const landingPageType = defineType({
  type: 'document',
  name: 'landingPage',
  title: 'Landing Page',
  description: null,
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productSection'}]}],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  productType,
  productSectionType,
  categoryType,
  landingPageType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > jumpstart-shop.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'for adding products',
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [
                      {type: 'product'},
                      {type: 'productSection'},
                      {type: 'category'},
                      {type: 'landingPage'},
                    ],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'product'},
                {type: 'productSection'},
                {type: 'category'},
                {type: 'landingPage'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'product'},
            {type: 'productSection'},
            {type: 'category'},
            {type: 'landingPage'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'price',
      type: 'number',
      title: 'Price',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productSectionType = defineType({
  type: 'document',
  name: 'productSection',
  title: 'Product Section',
  description: null,
  fields: [
    defineField({name: 'internalName', type: 'string', title: 'Internal Name', hidden: false}),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'products',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'product'}]}],
      title: 'Products',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: null,
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const landingPageType = defineType({
  type: 'document',
  name: 'landingPage',
  title: 'Landing Page',
  description: null,
  fields: [
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productSection'}]}],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  productType,
  productSectionType,
  categoryType,
  landingPageType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > knowledge-base.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const kbAppArticleType = defineType({
  type: 'document',
  name: 'kbAppArticle',
  title: 'Article',
  description: 'Create support articles for your help center site.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
      options: {source: 'title'},
    }),
    defineField({
      name: 'metaDescription',
      type: 'string',
      title: 'Meta description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'kbAppArticle'}, {type: 'kbAppCategory'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'kbAppArticle'},
                {type: 'kbAppCategory'},
                {type: 'kbAppLink'},
                {type: 'kbAppSiteSettings'},
                {type: 'codeBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'kbAppArticle'},
            {type: 'kbAppCategory'},
            {type: 'kbAppLink'},
            {type: 'kbAppSiteSettings'},
            {type: 'codeBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'kbAppCategory',
      type: 'reference',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'kbAppCategory'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppCategoryType = defineType({
  type: 'document',
  name: 'kbAppCategory',
  title: 'Category',
  description: 'Create categories for organizing support articles.',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        Rule.required()
          .unique()
          .regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
    }),
    defineField({
      name: 'previewDescription',
      type: 'string',
      title: 'Preview description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppLinkType = defineType({
  type: 'document',
  name: 'kbAppLink',
  title: 'Link',
  description: 'Add links throughout your site.',
  fields: [
    defineField({
      name: 'text',
      type: 'string',
      title: 'Text',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'text'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppSiteSettingsType = defineType({
  type: 'document',
  name: 'kbAppSiteSettings',
  title: 'Site settings',
  description: 'Customize the look of the help center site included with this app.',
  fields: [
    defineField({
      name: 'siteName',
      type: 'string',
      title: 'Site name (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'siteDescription',
      type: 'string',
      title: 'Site description (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'siteKeywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Site keywords (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const codeBlockType = defineType({
  type: 'document',
  name: 'codeBlock',
  title: 'Code block',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'language',
      type: 'string',
      title: 'Language',
      hidden: false,
      options: {
        list: ['css', 'go', 'html', 'javascript', 'jsx', 'php', 'typescript', 'xml'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'code',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Code',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  kbAppArticleType,
  kbAppCategoryType,
  kbAppLinkType,
  kbAppSiteSettingsType,
  codeBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > knowledge-base.json 2`] = `
"// generated by contentful-to-sanity

export const kbAppArticleType = {
  type: 'document',
  name: 'kbAppArticle',
  title: 'Article',
  description: 'Create support articles for your help center site.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
      options: {source: 'title'},
    },
    {
      name: 'metaDescription',
      type: 'string',
      title: 'Meta description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  {
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'kbAppArticle'}, {type: 'kbAppCategory'}],
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'kbAppArticle'},
                {type: 'kbAppCategory'},
                {type: 'kbAppLink'},
                {type: 'kbAppSiteSettings'},
                {type: 'codeBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'kbAppArticle'},
            {type: 'kbAppCategory'},
            {type: 'kbAppLink'},
            {type: 'kbAppSiteSettings'},
            {type: 'codeBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'kbAppCategory',
      type: 'reference',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'kbAppCategory'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const kbAppCategoryType = {
  type: 'document',
  name: 'kbAppCategory',
  title: 'Category',
  description: 'Create categories for organizing support articles.',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    },
    {
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        Rule.required()
          .unique()
          .regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
    },
    {
      name: 'previewDescription',
      type: 'string',
      title: 'Preview description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const kbAppLinkType = {
  type: 'document',
  name: 'kbAppLink',
  title: 'Link',
  description: 'Add links throughout your site.',
  fields: [
    {
      name: 'text',
      type: 'string',
      title: 'Text',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'text'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const kbAppSiteSettingsType = {
  type: 'document',
  name: 'kbAppSiteSettings',
  title: 'Site settings',
  description: 'Customize the look of the help center site included with this app.',
  fields: [
    {
      name: 'siteName',
      type: 'string',
      title: 'Site name (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    },
    {
      name: 'siteDescription',
      type: 'string',
      title: 'Site description (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'siteKeywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Site keywords (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'tag'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'siteName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const codeBlockType = {
  type: 'document',
  name: 'codeBlock',
  title: 'Code block',
  description: '',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'language',
      type: 'string',
      title: 'Language',
      hidden: false,
      options: {
        list: ['css', 'go', 'html', 'javascript', 'jsx', 'php', 'typescript', 'xml'],
        layout: 'dropdown',
      },
    },
    {
      name: 'code',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Code',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  kbAppArticleType,
  kbAppCategoryType,
  kbAppLinkType,
  kbAppSiteSettingsType,
  codeBlockType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > knowledge-base.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const kbAppArticleType = defineType({
  type: 'document',
  name: 'kbAppArticle',
  title: 'Article',
  description: 'Create support articles for your help center site.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
      options: {source: 'title'},
    }),
    defineField({
      name: 'metaDescription',
      type: 'string',
      title: 'Meta description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'kbAppArticle'}, {type: 'kbAppCategory'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'kbAppArticle'},
                {type: 'kbAppCategory'},
                {type: 'kbAppLink'},
                {type: 'kbAppSiteSettings'},
                {type: 'codeBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'kbAppArticle'},
            {type: 'kbAppCategory'},
            {type: 'kbAppLink'},
            {type: 'kbAppSiteSettings'},
            {type: 'codeBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'kbAppCategory',
      type: 'reference',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'kbAppCategory'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppCategoryType = defineType({
  type: 'document',
  name: 'kbAppCategory',
  title: 'Category',
  description: 'Create categories for organizing support articles.',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        Rule.required()
          .unique()
          .regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
    }),
    defineField({
      name: 'previewDescription',
      type: 'string',
      title: 'Preview description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppLinkType = defineType({
  type: 'document',
  name: 'kbAppLink',
  title: 'Link',
  description: 'Add links throughout your site.',
  fields: [
    defineField({
      name: 'text',
      type: 'string',
      title: 'Text',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'text'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppSiteSettingsType = defineType({
  type: 'document',
  name: 'kbAppSiteSettings',
  title: 'Site settings',
  description: 'Customize the look of the help center site included with this app.',
  fields: [
    defineField({
      name: 'siteName',
      type: 'string',
      title: 'Site name (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'siteDescription',
      type: 'string',
      title: 'Site description (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'siteKeywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Site keywords (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const codeBlockType = defineType({
  type: 'document',
  name: 'codeBlock',
  title: 'Code block',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'language',
      type: 'string',
      title: 'Language',
      hidden: false,
      options: {
        list: ['css', 'go', 'html', 'javascript', 'jsx', 'php', 'typescript', 'xml'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'code',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Code',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  kbAppArticleType,
  kbAppCategoryType,
  kbAppLinkType,
  kbAppSiteSettingsType,
  codeBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > knowledge-base.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const kbAppArticleType = defineType({
  type: 'document',
  name: 'kbAppArticle',
  title: 'Article',
  description: 'Create support articles for your help center site.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
      options: {source: 'title'},
    }),
    defineField({
      name: 'metaDescription',
      type: 'string',
      title: 'Meta description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'kbAppArticle'}, {type: 'kbAppCategory'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'kbAppArticle'},
                {type: 'kbAppCategory'},
                {type: 'kbAppLink'},
                {type: 'kbAppSiteSettings'},
                {type: 'codeBlock'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'kbAppArticle'},
            {type: 'kbAppCategory'},
            {type: 'kbAppLink'},
            {type: 'kbAppSiteSettings'},
            {type: 'codeBlock'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'kbAppCategory',
      type: 'reference',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'kbAppCategory'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppCategoryType = defineType({
  type: 'document',
  name: 'kbAppCategory',
  title: 'Category',
  description: 'Create categories for organizing support articles.',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        Rule.required()
          .unique()
          .regex(/^[a-z0-9_\\\\/\\\\-]+$/, {invert: false}),
    }),
    defineField({
      name: 'previewDescription',
      type: 'string',
      title: 'Preview description',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppLinkType = defineType({
  type: 'document',
  name: 'kbAppLink',
  title: 'Link',
  description: 'Add links throughout your site.',
  fields: [
    defineField({
      name: 'text',
      type: 'string',
      title: 'Text',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'text'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const kbAppSiteSettingsType = defineType({
  type: 'document',
  name: 'kbAppSiteSettings',
  title: 'Site settings',
  description: 'Customize the look of the help center site included with this app.',
  fields: [
    defineField({
      name: 'siteName',
      type: 'string',
      title: 'Site name (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      name: 'siteDescription',
      type: 'string',
      title: 'Site description (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'siteKeywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Site keywords (SEO)',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const codeBlockType = defineType({
  type: 'document',
  name: 'codeBlock',
  title: 'Code block',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'language',
      type: 'string',
      title: 'Language',
      hidden: false,
      options: {
        list: ['css', 'go', 'html', 'javascript', 'jsx', 'php', 'typescript', 'xml'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'code',
      type: 'text',
      title: 'Code',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  kbAppArticleType,
  kbAppCategoryType,
  kbAppLinkType,
  kbAppSiteSettingsType,
  codeBlockType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > ls-cma-1.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const mediaWrapperType = defineType({
  type: 'document',
  name: 'mediaWrapper',
  title: 'Media Wrapper',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'altText', type: 'string', title: 'Alt Text', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({name: 'asset', type: 'file', title: 'Asset', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteMetadataType = defineType({
  type: 'document',
  name: 'siteMetadata',
  title: 'Site Metadata',
  description: '',
  fields: [
    defineField({name: 'siteTitle', type: 'string', title: 'Site Title', hidden: false}),
    defineField({name: 'titleTemplate', type: 'string', title: 'Title Template', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'pathname', type: 'string', title: 'Pathname', hidden: false}),
    defineField({name: 'siteLanguage', type: 'string', title: 'Site Language', hidden: false}),
    defineField({name: 'siteLocale', type: 'string', title: 'Site Locale', hidden: false}),
    defineField({
      name: 'twitterUsername',
      type: 'string',
      title: 'Twitter Username',
      hidden: false,
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
    }),
    defineField({
      name: 'backgroundImage',
      type: 'reference',
      title: 'Background Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'pageTitle', type: 'string', title: 'Page Title', hidden: false}),
    defineField({
      name: 'pageDescription',
      type: 'string',
      title: 'Page Description',
      hidden: false,
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'viewport', type: 'string', title: 'Viewport', hidden: false}),
    defineField({name: 'ogtitle', type: 'string', title: 'OG:title', hidden: false}),
    defineField({name: 'ogtype', type: 'string', title: 'OG:type', hidden: false}),
    defineField({name: 'ogurl', type: 'string', title: 'OG:url', hidden: false}),
    defineField({name: 'ogimage', type: 'string', title: 'OG:image', hidden: false}),
    defineField({name: 'ogdescription', type: 'string', title: 'OG:description', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productLandingPageType = defineType({
  type: 'document',
  name: 'productLandingPage',
  title: 'Product Landing Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'categories',
      type: 'reference',
      title: 'Categories',
      hidden: false,
      to: [{type: 'categories'}],
    }),
    defineField({
      name: 'header',
      type: 'reference',
      title: 'Header',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'headline',
      type: 'reference',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'headline'}],
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'header'},
            {type: 'headline'},
            {type: 'productTile'},
            {type: 'productTiles'},
            {type: 'valuePropositions'},
          ],
        },
      ],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      name: 'footer',
      type: 'reference',
      title: 'Footer',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTileType = defineType({
  type: 'document',
  name: 'productTile',
  title: 'Product Tile',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'cta',
      type: 'reference',
      title: 'CTA Text',
      hidden: false,
      to: [{type: 'resource'}],
    }),
    defineField({
      name: 'ctaUrl',
      type: 'string',
      title: 'CTA URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'price',
      type: 'reference',
      title: 'Price',
      hidden: false,
      to: [{type: 'price'}],
    }),
    defineField({
      name: 'image',
      type: 'reference',
      title: 'Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      name: 'position',
      type: 'string',
      title: 'Position',
      hidden: false,
      options: {list: ['Bottom Left', 'Bottom Right'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headlineType = defineType({
  type: 'document',
  name: 'headline',
  title: 'Blurb',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          marks: {
            decorators: [{title: 'Strong', value: 'strong'}],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'link'}]}],
        },
      ],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headerType = defineType({
  type: 'document',
  name: 'header',
  title: 'Header',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationBar',
      type: 'reference',
      title: 'Navigation Bar',
      hidden: false,
      to: [{type: 'navigationBar'}],
    }),
    defineField({
      name: 'siteNavigationBar',
      type: 'reference',
      title: 'Site Navigation Bar',
      hidden: false,
      to: [{type: 'siteNavigationBar'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const linkType = defineType({
  type: 'document',
  name: 'link',
  title: 'Link',
  description: '',
  fields: [
    defineField({name: 'tItle', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({name: 'url', type: 'string', title: 'URL', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'tItle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerType = defineType({
  type: 'document',
  name: 'footer',
  title: 'Footer',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'footerSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'footerSection'}]}],
      title: 'Footer Section',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationSectionType = defineType({
  type: 'document',
  name: 'navigationSection',
  title: 'Navigation Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [
        {
          type: 'string',
          validation: (Rule) =>
            Rule.regex(
              /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
              {invert: false},
            ),
        },
      ],
      title: 'Links',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerSectionType = defineType({
  type: 'document',
  name: 'footerSection',
  title: 'Footer Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionType = defineType({
  type: 'document',
  name: 'valueProposition',
  title: 'Value Proposition',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({name: 'body', type: 'string', title: 'Body', hidden: false}),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTilesType = defineType({
  type: 'document',
  name: 'productTiles',
  title: 'Product Tiles',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'productTile',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productTile'}]}],
      title: 'Product Tile',
      hidden: false,
      validation: (Rule) => Rule.required().min(1),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionsType = defineType({
  type: 'document',
  name: 'valuePropositions',
  title: 'Value Propositions',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'valueProposition',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'valueProposition'}]}],
      title: 'Value Proposition',
      hidden: false,
      validation: (Rule) => Rule.required().min(3),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteNavigationBarType = defineType({
  type: 'document',
  name: 'siteNavigationBar',
  title: 'Site Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationSection'}]}],
      title: 'Navigation Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationLinkType = defineType({
  type: 'document',
  name: 'navigationLink',
  title: 'Navigation Link',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationBarType = defineType({
  type: 'document',
  name: 'navigationBar',
  title: 'Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationElement',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationLink'}]}],
      title: 'Navigation Link',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceSetType = defineType({
  type: 'document',
  name: 'resourceSet',
  title: 'Resource Set',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'resources',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'resource'}]}],
      title: 'Resources',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceType = defineType({
  type: 'document',
  name: 'resource',
  title: 'Resource',
  description: '',
  fields: [
    defineField({name: 'key', type: 'string', title: 'Key', hidden: false}),
    defineField({name: 'value', type: 'string', title: 'Value', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'key'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const priceType = defineType({
  type: 'document',
  name: 'price',
  title: 'Price',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({name: 'msrp', type: 'number', title: 'MSRP', hidden: false}),
    defineField({name: 'monthlyPrice', type: 'number', title: 'Monthly Price', hidden: false}),
    defineField({
      name: 'numberOfMonths',
      type: 'number',
      title: 'Number of Months',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  mediaWrapperType,
  siteMetadataType,
  seoMetadataType,
  productLandingPageType,
  productTileType,
  headlineType,
  headerType,
  linkType,
  footerType,
  navigationSectionType,
  categoriesType,
  footerSectionType,
  valuePropositionType,
  productTilesType,
  valuePropositionsType,
  siteNavigationBarType,
  navigationLinkType,
  navigationBarType,
  resourceSetType,
  resourceType,
  priceType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > ls-cma-1.json 2`] = `
"// generated by contentful-to-sanity

export const mediaWrapperType = {
  type: 'document',
  name: 'mediaWrapper',
  title: 'Media Wrapper',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'altText', type: 'string', title: 'Alt Text', hidden: false},
    {name: 'description', type: 'string', title: 'Description', hidden: false},
    {name: 'caption', type: 'string', title: 'Caption', hidden: false},
    {name: 'asset', type: 'file', title: 'Asset', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const siteMetadataType = {
  type: 'document',
  name: 'siteMetadata',
  title: 'Site Metadata',
  description: '',
  fields: [
    {name: 'siteTitle', type: 'string', title: 'Site Title', hidden: false},
    {name: 'titleTemplate', type: 'string', title: 'Title Template', hidden: false},
    {name: 'description', type: 'string', title: 'Description', hidden: false},
    {name: 'pathname', type: 'string', title: 'Pathname', hidden: false},
    {name: 'siteLanguage', type: 'string', title: 'Site Language', hidden: false},
    {name: 'siteLocale', type: 'string', title: 'Site Locale', hidden: false},
    {name: 'twitterUsername', type: 'string', title: 'Twitter Username', hidden: false},
    {name: 'backgroundColor', type: 'string', title: 'Background Color', hidden: false},
    {
      name: 'backgroundImage',
      type: 'reference',
      title: 'Background Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'siteTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const seoMetadataType = {
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'pageTitle', type: 'string', title: 'Page Title', hidden: false},
    {name: 'pageDescription', type: 'string', title: 'Page Description', hidden: false},
    {
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {name: 'viewport', type: 'string', title: 'Viewport', hidden: false},
    {name: 'ogtitle', type: 'string', title: 'OG:title', hidden: false},
    {name: 'ogtype', type: 'string', title: 'OG:type', hidden: false},
    {name: 'ogurl', type: 'string', title: 'OG:url', hidden: false},
    {name: 'ogimage', type: 'string', title: 'OG:image', hidden: false},
    {name: 'ogdescription', type: 'string', title: 'OG:description', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const productLandingPageType = {
  type: 'document',
  name: 'productLandingPage',
  title: 'Product Landing Page',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    },
    {
      name: 'categories',
      type: 'reference',
      title: 'Categories',
      hidden: false,
      to: [{type: 'categories'}],
    },
    {name: 'header', type: 'reference', title: 'Header', hidden: false, to: [{type: 'header'}]},
    {
      name: 'headline',
      type: 'reference',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'headline'}],
    },
    {
      name: 'sections',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'header'},
            {type: 'headline'},
            {type: 'productTile'},
            {type: 'productTiles'},
            {type: 'valuePropositions'},
          ],
        },
      ],
      title: 'Sections',
      hidden: false,
    },
    {name: 'footer', type: 'reference', title: 'Footer', hidden: false, to: [{type: 'footer'}]},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const productTileType = {
  type: 'document',
  name: 'productTile',
  title: 'Product Tile',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'headline', type: 'string', title: 'Headline', hidden: false},
    {name: 'cta', type: 'reference', title: 'CTA Text', hidden: false, to: [{type: 'resource'}]},
    {
      name: 'ctaUrl',
      type: 'string',
      title: 'CTA URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {name: 'price', type: 'reference', title: 'Price', hidden: false, to: [{type: 'price'}]},
    {name: 'image', type: 'reference', title: 'Image', hidden: false, to: [{type: 'mediaWrapper'}]},
    {
      name: 'position',
      type: 'string',
      title: 'Position',
      hidden: false,
      options: {list: ['Bottom Left', 'Bottom Right'], layout: 'radio'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const headlineType = {
  type: 'document',
  name: 'headline',
  title: 'Blurb',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          marks: {
            decorators: [{title: 'Strong', value: 'strong'}],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'link'}]}],
        },
      ],
      title: 'Body',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const headerType = {
  type: 'document',
  name: 'header',
  title: 'Header',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'navigationBar',
      type: 'reference',
      title: 'Navigation Bar',
      hidden: false,
      to: [{type: 'navigationBar'}],
    },
    {
      name: 'siteNavigationBar',
      type: 'reference',
      title: 'Site Navigation Bar',
      hidden: false,
      to: [{type: 'siteNavigationBar'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const linkType = {
  type: 'document',
  name: 'link',
  title: 'Link',
  description: '',
  fields: [
    {name: 'tItle', type: 'string', title: 'Title', hidden: false},
    {name: 'text', type: 'string', title: 'Text', hidden: false},
    {name: 'url', type: 'string', title: 'URL', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'tItle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const footerType = {
  type: 'document',
  name: 'footer',
  title: 'Footer',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'footerSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'footerSection'}]}],
      title: 'Footer Section',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const navigationSectionType = {
  type: 'document',
  name: 'navigationSection',
  title: 'Navigation Section',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'links',
      type: 'array',
      of: [
        {
          type: 'string',
          validation: (Rule) =>
            Rule.regex(
              /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
              {invert: false},
            ),
        },
      ],
      title: 'Links',
      hidden: false,
      options: {layout: 'tag'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const categoriesType = {
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    {
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const footerSectionType = {
  type: 'document',
  name: 'footerSection',
  title: 'Footer Section',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Links',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const valuePropositionType = {
  type: 'document',
  name: 'valueProposition',
  title: 'Value Proposition',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'headline', type: 'string', title: 'Headline', hidden: false},
    {name: 'body', type: 'string', title: 'Body', hidden: false},
    {name: 'icon', type: 'reference', title: 'Icon', hidden: false, to: [{type: 'mediaWrapper'}]},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const productTilesType = {
  type: 'document',
  name: 'productTiles',
  title: 'Product Tiles',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'productTile',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productTile'}]}],
      title: 'Product Tile',
      hidden: false,
      validation: (Rule) => Rule.required().min(1),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const valuePropositionsType = {
  type: 'document',
  name: 'valuePropositions',
  title: 'Value Propositions',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'headline', type: 'string', title: 'Headline', hidden: false},
    {
      name: 'valueProposition',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'valueProposition'}]}],
      title: 'Value Proposition',
      hidden: false,
      validation: (Rule) => Rule.required().min(3),
      options: {layout: 'grid'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const siteNavigationBarType = {
  type: 'document',
  name: 'siteNavigationBar',
  title: 'Site Navigation Bar',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'navigationSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationSection'}]}],
      title: 'Navigation Sections',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const navigationLinkType = {
  type: 'document',
  name: 'navigationLink',
  title: 'Navigation Link',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'text', type: 'string', title: 'Text', hidden: false},
    {
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {name: 'icon', type: 'reference', title: 'Icon', hidden: false, to: [{type: 'mediaWrapper'}]},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const navigationBarType = {
  type: 'document',
  name: 'navigationBar',
  title: 'Navigation Bar',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'navigationElement',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationLink'}]}],
      title: 'Navigation Link',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const resourceSetType = {
  type: 'document',
  name: 'resourceSet',
  title: 'Resource Set',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {
      name: 'resources',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'resource'}]}],
      title: 'Resources',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const resourceType = {
  type: 'document',
  name: 'resource',
  title: 'Resource',
  description: '',
  fields: [
    {name: 'key', type: 'string', title: 'Key', hidden: false},
    {name: 'value', type: 'string', title: 'Value', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'key'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const priceType = {
  type: 'document',
  name: 'price',
  title: 'Price',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'price', type: 'number', title: 'Price', hidden: false},
    {name: 'msrp', type: 'number', title: 'MSRP', hidden: false},
    {name: 'monthlyPrice', type: 'number', title: 'Monthly Price', hidden: false},
    {
      name: 'numberOfMonths',
      type: 'number',
      title: 'Number of Months',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  mediaWrapperType,
  siteMetadataType,
  seoMetadataType,
  productLandingPageType,
  productTileType,
  headlineType,
  headerType,
  linkType,
  footerType,
  navigationSectionType,
  categoriesType,
  footerSectionType,
  valuePropositionType,
  productTilesType,
  valuePropositionsType,
  siteNavigationBarType,
  navigationLinkType,
  navigationBarType,
  resourceSetType,
  resourceType,
  priceType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > ls-cma-1.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const mediaWrapperType = defineType({
  type: 'document',
  name: 'mediaWrapper',
  title: 'Media Wrapper',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'altText', type: 'string', title: 'Alt Text', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({name: 'asset', type: 'file', title: 'Asset', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteMetadataType = defineType({
  type: 'document',
  name: 'siteMetadata',
  title: 'Site Metadata',
  description: '',
  fields: [
    defineField({name: 'siteTitle', type: 'string', title: 'Site Title', hidden: false}),
    defineField({name: 'titleTemplate', type: 'string', title: 'Title Template', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'pathname', type: 'string', title: 'Pathname', hidden: false}),
    defineField({name: 'siteLanguage', type: 'string', title: 'Site Language', hidden: false}),
    defineField({name: 'siteLocale', type: 'string', title: 'Site Locale', hidden: false}),
    defineField({
      name: 'twitterUsername',
      type: 'string',
      title: 'Twitter Username',
      hidden: false,
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
    }),
    defineField({
      name: 'backgroundImage',
      type: 'reference',
      title: 'Background Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'pageTitle', type: 'string', title: 'Page Title', hidden: false}),
    defineField({
      name: 'pageDescription',
      type: 'string',
      title: 'Page Description',
      hidden: false,
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'viewport', type: 'string', title: 'Viewport', hidden: false}),
    defineField({name: 'ogtitle', type: 'string', title: 'OG:title', hidden: false}),
    defineField({name: 'ogtype', type: 'string', title: 'OG:type', hidden: false}),
    defineField({name: 'ogurl', type: 'string', title: 'OG:url', hidden: false}),
    defineField({name: 'ogimage', type: 'string', title: 'OG:image', hidden: false}),
    defineField({name: 'ogdescription', type: 'string', title: 'OG:description', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productLandingPageType = defineType({
  type: 'document',
  name: 'productLandingPage',
  title: 'Product Landing Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'categories',
      type: 'reference',
      title: 'Categories',
      hidden: false,
      to: [{type: 'categories'}],
    }),
    defineField({
      name: 'header',
      type: 'reference',
      title: 'Header',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'headline',
      type: 'reference',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'headline'}],
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'header'},
            {type: 'headline'},
            {type: 'productTile'},
            {type: 'productTiles'},
            {type: 'valuePropositions'},
          ],
        },
      ],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      name: 'footer',
      type: 'reference',
      title: 'Footer',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTileType = defineType({
  type: 'document',
  name: 'productTile',
  title: 'Product Tile',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'cta',
      type: 'reference',
      title: 'CTA Text',
      hidden: false,
      to: [{type: 'resource'}],
    }),
    defineField({
      name: 'ctaUrl',
      type: 'string',
      title: 'CTA URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'price',
      type: 'reference',
      title: 'Price',
      hidden: false,
      to: [{type: 'price'}],
    }),
    defineField({
      name: 'image',
      type: 'reference',
      title: 'Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      name: 'position',
      type: 'string',
      title: 'Position',
      hidden: false,
      options: {list: ['Bottom Left', 'Bottom Right'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headlineType = defineType({
  type: 'document',
  name: 'headline',
  title: 'Blurb',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          marks: {
            decorators: [{title: 'Strong', value: 'strong'}],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'link'}]}],
        },
      ],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headerType = defineType({
  type: 'document',
  name: 'header',
  title: 'Header',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationBar',
      type: 'reference',
      title: 'Navigation Bar',
      hidden: false,
      to: [{type: 'navigationBar'}],
    }),
    defineField({
      name: 'siteNavigationBar',
      type: 'reference',
      title: 'Site Navigation Bar',
      hidden: false,
      to: [{type: 'siteNavigationBar'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const linkType = defineType({
  type: 'document',
  name: 'link',
  title: 'Link',
  description: '',
  fields: [
    defineField({name: 'tItle', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({name: 'url', type: 'string', title: 'URL', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'tItle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerType = defineType({
  type: 'document',
  name: 'footer',
  title: 'Footer',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'footerSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'footerSection'}]}],
      title: 'Footer Section',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationSectionType = defineType({
  type: 'document',
  name: 'navigationSection',
  title: 'Navigation Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [
        {
          type: 'string',
          validation: (Rule) =>
            Rule.regex(
              /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
              {invert: false},
            ),
        },
      ],
      title: 'Links',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerSectionType = defineType({
  type: 'document',
  name: 'footerSection',
  title: 'Footer Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionType = defineType({
  type: 'document',
  name: 'valueProposition',
  title: 'Value Proposition',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({name: 'body', type: 'string', title: 'Body', hidden: false}),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTilesType = defineType({
  type: 'document',
  name: 'productTiles',
  title: 'Product Tiles',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'productTile',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productTile'}]}],
      title: 'Product Tile',
      hidden: false,
      validation: (Rule) => Rule.required().min(1),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionsType = defineType({
  type: 'document',
  name: 'valuePropositions',
  title: 'Value Propositions',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'valueProposition',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'valueProposition'}]}],
      title: 'Value Proposition',
      hidden: false,
      validation: (Rule) => Rule.required().min(3),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteNavigationBarType = defineType({
  type: 'document',
  name: 'siteNavigationBar',
  title: 'Site Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationSection'}]}],
      title: 'Navigation Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationLinkType = defineType({
  type: 'document',
  name: 'navigationLink',
  title: 'Navigation Link',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationBarType = defineType({
  type: 'document',
  name: 'navigationBar',
  title: 'Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationElement',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationLink'}]}],
      title: 'Navigation Link',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceSetType = defineType({
  type: 'document',
  name: 'resourceSet',
  title: 'Resource Set',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'resources',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'resource'}]}],
      title: 'Resources',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceType = defineType({
  type: 'document',
  name: 'resource',
  title: 'Resource',
  description: '',
  fields: [
    defineField({name: 'key', type: 'string', title: 'Key', hidden: false}),
    defineField({name: 'value', type: 'string', title: 'Value', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'key'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const priceType = defineType({
  type: 'document',
  name: 'price',
  title: 'Price',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({name: 'msrp', type: 'number', title: 'MSRP', hidden: false}),
    defineField({name: 'monthlyPrice', type: 'number', title: 'Monthly Price', hidden: false}),
    defineField({
      name: 'numberOfMonths',
      type: 'number',
      title: 'Number of Months',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  mediaWrapperType,
  siteMetadataType,
  seoMetadataType,
  productLandingPageType,
  productTileType,
  headlineType,
  headerType,
  linkType,
  footerType,
  navigationSectionType,
  categoriesType,
  footerSectionType,
  valuePropositionType,
  productTilesType,
  valuePropositionsType,
  siteNavigationBarType,
  navigationLinkType,
  navigationBarType,
  resourceSetType,
  resourceType,
  priceType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > ls-cma-1.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const mediaWrapperType = defineType({
  type: 'document',
  name: 'mediaWrapper',
  title: 'Media Wrapper',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'altText', type: 'string', title: 'Alt Text', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({name: 'asset', type: 'file', title: 'Asset', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteMetadataType = defineType({
  type: 'document',
  name: 'siteMetadata',
  title: 'Site Metadata',
  description: '',
  fields: [
    defineField({name: 'siteTitle', type: 'string', title: 'Site Title', hidden: false}),
    defineField({name: 'titleTemplate', type: 'string', title: 'Title Template', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({name: 'pathname', type: 'string', title: 'Pathname', hidden: false}),
    defineField({name: 'siteLanguage', type: 'string', title: 'Site Language', hidden: false}),
    defineField({name: 'siteLocale', type: 'string', title: 'Site Locale', hidden: false}),
    defineField({
      name: 'twitterUsername',
      type: 'string',
      title: 'Twitter Username',
      hidden: false,
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
    }),
    defineField({
      name: 'backgroundImage',
      type: 'reference',
      title: 'Background Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'siteTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'pageTitle', type: 'string', title: 'Page Title', hidden: false}),
    defineField({
      name: 'pageDescription',
      type: 'string',
      title: 'Page Description',
      hidden: false,
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'viewport', type: 'string', title: 'Viewport', hidden: false}),
    defineField({name: 'ogtitle', type: 'string', title: 'OG:title', hidden: false}),
    defineField({name: 'ogtype', type: 'string', title: 'OG:type', hidden: false}),
    defineField({name: 'ogurl', type: 'string', title: 'OG:url', hidden: false}),
    defineField({name: 'ogimage', type: 'string', title: 'OG:image', hidden: false}),
    defineField({name: 'ogdescription', type: 'string', title: 'OG:description', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productLandingPageType = defineType({
  type: 'document',
  name: 'productLandingPage',
  title: 'Product Landing Page',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'categories',
      type: 'reference',
      title: 'Categories',
      hidden: false,
      to: [{type: 'categories'}],
    }),
    defineField({
      name: 'header',
      type: 'reference',
      title: 'Header',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'headline',
      type: 'reference',
      title: 'Headline',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'headline'}],
    }),
    defineField({
      name: 'sections',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'header'},
            {type: 'headline'},
            {type: 'productTile'},
            {type: 'productTiles'},
            {type: 'valuePropositions'},
          ],
        },
      ],
      title: 'Sections',
      hidden: false,
    }),
    defineField({
      name: 'footer',
      type: 'reference',
      title: 'Footer',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTileType = defineType({
  type: 'document',
  name: 'productTile',
  title: 'Product Tile',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'cta',
      type: 'reference',
      title: 'CTA Text',
      hidden: false,
      to: [{type: 'resource'}],
    }),
    defineField({
      name: 'ctaUrl',
      type: 'string',
      title: 'CTA URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'price',
      type: 'reference',
      title: 'Price',
      hidden: false,
      to: [{type: 'price'}],
    }),
    defineField({
      name: 'image',
      type: 'reference',
      title: 'Image',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      name: 'position',
      type: 'string',
      title: 'Position',
      hidden: false,
      options: {list: ['Bottom Left', 'Bottom Right'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headlineType = defineType({
  type: 'document',
  name: 'headline',
  title: 'Blurb',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          marks: {
            decorators: [{title: 'Strong', value: 'strong'}],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'link'}]}],
        },
      ],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const headerType = defineType({
  type: 'document',
  name: 'header',
  title: 'Header',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationBar',
      type: 'reference',
      title: 'Navigation Bar',
      hidden: false,
      to: [{type: 'navigationBar'}],
    }),
    defineField({
      name: 'siteNavigationBar',
      type: 'reference',
      title: 'Site Navigation Bar',
      hidden: false,
      to: [{type: 'siteNavigationBar'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const linkType = defineType({
  type: 'document',
  name: 'link',
  title: 'Link',
  description: '',
  fields: [
    defineField({name: 'tItle', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({name: 'url', type: 'string', title: 'URL', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'tItle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerType = defineType({
  type: 'document',
  name: 'footer',
  title: 'Footer',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'footerSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'footerSection'}]}],
      title: 'Footer Section',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationSectionType = defineType({
  type: 'document',
  name: 'navigationSection',
  title: 'Navigation Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [
        {
          type: 'string',
          validation: (Rule) =>
            Rule.regex(
              /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
              {invert: false},
            ),
        },
      ],
      title: 'Links',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoriesType = defineType({
  type: 'document',
  name: 'categories',
  title: 'Categories',
  description: '',
  fields: [
    defineField({
      name: 'category',
      type: 'string',
      title: 'Category',
      hidden: false,
      validation: (Rule) => Rule.required().unique(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'category'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const footerSectionType = defineType({
  type: 'document',
  name: 'footerSection',
  title: 'Footer Section',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionType = defineType({
  type: 'document',
  name: 'valueProposition',
  title: 'Value Proposition',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({name: 'body', type: 'string', title: 'Body', hidden: false}),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const productTilesType = defineType({
  type: 'document',
  name: 'productTiles',
  title: 'Product Tiles',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'productTile',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'productTile'}]}],
      title: 'Product Tile',
      hidden: false,
      validation: (Rule) => Rule.required().min(1),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const valuePropositionsType = defineType({
  type: 'document',
  name: 'valuePropositions',
  title: 'Value Propositions',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'valueProposition',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'valueProposition'}]}],
      title: 'Value Proposition',
      hidden: false,
      validation: (Rule) => Rule.required().min(3),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const siteNavigationBarType = defineType({
  type: 'document',
  name: 'siteNavigationBar',
  title: 'Site Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationSections',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationSection'}]}],
      title: 'Navigation Sections',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationLinkType = defineType({
  type: 'document',
  name: 'navigationLink',
  title: 'Navigation Link',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'text', type: 'string', title: 'Text', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'icon',
      type: 'reference',
      title: 'Icon',
      hidden: false,
      to: [{type: 'mediaWrapper'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const navigationBarType = defineType({
  type: 'document',
  name: 'navigationBar',
  title: 'Navigation Bar',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'navigationElement',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationLink'}]}],
      title: 'Navigation Link',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceSetType = defineType({
  type: 'document',
  name: 'resourceSet',
  title: 'Resource Set',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'resources',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'resource'}]}],
      title: 'Resources',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const resourceType = defineType({
  type: 'document',
  name: 'resource',
  title: 'Resource',
  description: '',
  fields: [
    defineField({name: 'key', type: 'string', title: 'Key', hidden: false}),
    defineField({name: 'value', type: 'string', title: 'Value', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'key'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const priceType = defineType({
  type: 'document',
  name: 'price',
  title: 'Price',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({name: 'msrp', type: 'number', title: 'MSRP', hidden: false}),
    defineField({name: 'monthlyPrice', type: 'number', title: 'Monthly Price', hidden: false}),
    defineField({
      name: 'numberOfMonths',
      type: 'number',
      title: 'Number of Months',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  mediaWrapperType,
  siteMetadataType,
  seoMetadataType,
  productLandingPageType,
  productTileType,
  headlineType,
  headerType,
  linkType,
  footerType,
  navigationSectionType,
  categoriesType,
  footerSectionType,
  valuePropositionType,
  productTilesType,
  valuePropositionsType,
  siteNavigationBarType,
  navigationLinkType,
  navigationBarType,
  resourceSetType,
  resourceType,
  priceType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > nextjs.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'excerpt',
      type: 'string',
      title: 'Excerpt',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [authorType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > nextjs.json 2`] = `
"// generated by contentful-to-sanity

export const authorType = {
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const postType = {
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'excerpt',
      type: 'string',
      title: 'Excerpt',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    },
    {
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [authorType, postType, breakType]
"
`;

exports[`contentfulToStudioSchema > nextjs.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'excerpt',
      type: 'string',
      title: 'Excerpt',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [authorType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > nextjs.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const authorType = defineType({
  type: 'document',
  name: 'author',
  title: 'Author',
  description: '',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'content',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Content',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'excerpt',
      type: 'string',
      title: 'Excerpt',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'date',
      type: 'datetime',
      title: 'Date',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      validation: (Rule) => Rule.required(),
      to: [{type: 'author'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [authorType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > product-catalogue.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'This content type defines the structure of a product entry',
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'The slug is auto-generated based on the title field',
      options: {source: 'productName'},
    }),
    defineField({
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'sizetypecolor',
      type: 'string',
      title: 'Size/Type/Color',
      hidden: false,
      description:
        'To view options as a dropdown, add pre-defined values in the field validation settings',
    }),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
      description:
        'By default the first image is treated as a product cover image. If no images are provided, a placeholder icon will be displayed',
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description: '',
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'You can choose more than one category',
      options: {layout: 'grid'},
    }),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({
      name: 'brand',
      type: 'reference',
      title: 'Brand',
      hidden: false,
      to: [{type: 'brand'}],
    }),
    defineField({
      name: 'quantity',
      type: 'number',
      title: 'Quantity',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'sku', type: 'string', title: 'SKU', hidden: false}),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Available at',
      hidden: false,
      description: 'Add a link to the website where a product is sold',
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: 'This content type defines the structure of a brand / product manufacturer entry',
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Website',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/, {invert: false}),
    }),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: 'This content type defines the structure of a product category',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [productType, brandType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > product-catalogue.json 2`] = `
"// generated by contentful-to-sanity

export const productType = {
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'This content type defines the structure of a product entry',
  fields: [
    {
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'The slug is auto-generated based on the title field',
      options: {source: 'productName'},
    },
    {
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'sizetypecolor',
      type: 'string',
      title: 'Size/Type/Color',
      hidden: false,
      description:
        'To view options as a dropdown, add pre-defined values in the field validation settings',
    },
    {
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
      description:
        'By default the first image is treated as a product cover image. If no images are provided, a placeholder icon will be displayed',
    },
    {
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description: '',
    },
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'You can choose more than one category',
      options: {layout: 'grid'},
    },
    {name: 'price', type: 'number', title: 'Price', hidden: false},
    {name: 'brand', type: 'reference', title: 'Brand', hidden: false, to: [{type: 'brand'}]},
    {
      name: 'quantity',
      type: 'number',
      title: 'Quantity',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    },
    {name: 'sku', type: 'string', title: 'SKU', hidden: false},
    {
      name: 'website',
      type: 'string',
      title: 'Available at',
      hidden: false,
      description: 'Add a link to the website where a product is sold',
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const brandType = {
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: 'This content type defines the structure of a brand / product manufacturer entry',
  fields: [
    {
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'logo', type: 'file', title: 'Logo', hidden: false},
    {
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'website',
      type: 'string',
      title: 'Website',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    },
    {name: 'twitter', type: 'string', title: 'Twitter', hidden: false},
    {
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/, {invert: false}),
    },
    {name: 'phone', type: 'array', of: [{type: 'string'}], title: 'Phone #', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const categoryType = {
  type: 'document',
  name: 'category',
  title: 'Category',
  description: 'This content type defines the structure of a product category',
  fields: [
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [productType, brandType, categoryType]
"
`;

exports[`contentfulToStudioSchema > product-catalogue.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'This content type defines the structure of a product entry',
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'The slug is auto-generated based on the title field',
      options: {source: 'productName'},
    }),
    defineField({
      name: 'productDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'sizetypecolor',
      type: 'string',
      title: 'Size/Type/Color',
      hidden: false,
      description:
        'To view options as a dropdown, add pre-defined values in the field validation settings',
    }),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
      description:
        'By default the first image is treated as a product cover image. If no images are provided, a placeholder icon will be displayed',
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description: '',
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'You can choose more than one category',
      options: {layout: 'grid'},
    }),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({
      name: 'brand',
      type: 'reference',
      title: 'Brand',
      hidden: false,
      to: [{type: 'brand'}],
    }),
    defineField({
      name: 'quantity',
      type: 'number',
      title: 'Quantity',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'sku', type: 'string', title: 'SKU', hidden: false}),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Available at',
      hidden: false,
      description: 'Add a link to the website where a product is sold',
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: 'This content type defines the structure of a brand / product manufacturer entry',
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'companyDescription',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Website',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/, {invert: false}),
    }),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: 'This content type defines the structure of a product category',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [productType, brandType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > product-catalogue.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const productType = defineType({
  type: 'document',
  name: 'product',
  title: 'Product',
  description: 'This content type defines the structure of a product entry',
  fields: [
    defineField({
      name: 'productName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Product name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'The slug is auto-generated based on the title field',
      options: {source: 'productName'},
    }),
    defineField({name: 'productDescription', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'sizetypecolor',
      type: 'string',
      title: 'Size/Type/Color',
      hidden: false,
      description:
        'To view options as a dropdown, add pre-defined values in the field validation settings',
    }),
    defineField({
      name: 'image',
      type: 'array',
      of: [{type: 'file'}],
      title: 'Image',
      hidden: false,
      description:
        'By default the first image is treated as a product cover image. If no images are provided, a placeholder icon will be displayed',
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description: '',
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'You can choose more than one category',
      options: {layout: 'grid'},
    }),
    defineField({name: 'price', type: 'number', title: 'Price', hidden: false}),
    defineField({
      name: 'brand',
      type: 'reference',
      title: 'Brand',
      hidden: false,
      to: [{type: 'brand'}],
    }),
    defineField({
      name: 'quantity',
      type: 'number',
      title: 'Quantity',
      hidden: false,
      validation: (Rule) => Rule.integer(),
    }),
    defineField({name: 'sku', type: 'string', title: 'SKU', hidden: false}),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Available at',
      hidden: false,
      description: 'Add a link to the website where a product is sold',
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'productName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const brandType = defineType({
  type: 'document',
  name: 'brand',
  title: 'Brand',
  description: 'This content type defines the structure of a brand / product manufacturer entry',
  fields: [
    defineField({
      name: 'companyName',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Company name',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({name: 'companyDescription', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'website',
      type: 'string',
      title: 'Website',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s\`!()\\\\[\\\\]{};:'\\".,<>?«»“”‘’]))/,
          {invert: false},
        ),
    }),
    defineField({name: 'twitter', type: 'string', title: 'Twitter', hidden: false}),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/, {invert: false}),
    }),
    defineField({
      name: 'phone',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Phone #',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'companyName'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description: 'This content type defines the structure of a product category',
  fields: [
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [productType, brandType, categoryType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > react-starter.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > react-starter.json 2`] = `
"// generated by contentful-to-sanity

export const heroImageType = {
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'image', type: 'image', title: 'Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const seoMetadataType = {
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'image', type: 'file', title: 'Image', hidden: false},
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    },
    {name: 'author', type: 'string', title: 'Author', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const specialOfferLandingPageType = {
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    },
    {name: 'hero', type: 'reference', title: 'Hero', hidden: false, to: [{type: 'heroImage'}]},
    {
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    },
    {
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    },
    {
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const specialOfferType = {
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'headline', type: 'string', title: 'Headline', hidden: false},
    {
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > react-starter.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > react-starter.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({name: 'description', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > references.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    }),
    defineField({
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'title', hidden: false}),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > references.json 2`] = `
"// generated by contentful-to-sanity

export const personType = {
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
            ],
          },
          of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    },
    {
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    },
    {
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const postType = {
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'title', hidden: false},
    {
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [personType, postType, breakType]
"
`;

exports[`contentfulToStudioSchema > references.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    }),
    defineField({
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'title', hidden: false}),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > references.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    }),
    defineField({
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'title', hidden: false}),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > remix.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const roleType = defineType({
  type: 'document',
  name: 'role',
  title: 'Role',
  description: '',
  fields: [
    defineField({name: 'roleTitle', type: 'string', title: 'Role Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'roleTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const projectsType = defineType({
  type: 'document',
  name: 'projects',
  title: 'Projects',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'desc',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'previewImage',
      type: 'file',
      title: 'Preview Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'Link',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'releaseDate', type: 'date', title: 'Release Date', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'blogBody',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Blog Body',
      hidden: false,
    }),
    defineField({name: 'publishDate', type: 'date', title: 'Publish Date', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'tag',
      type: 'array',
      of: [{type: 'string', options: {list: ['JavaScript', 'GraphQL', 'React', 'Contentful']}}],
      title: 'Tags',
      hidden: false,
      options: {
        list: [
          {value: 'JavaScript', title: 'JavaScript'},
          {value: 'GraphQL', title: 'GraphQL'},
          {value: 'React', title: 'React'},
          {value: 'Contentful', title: 'Contentful'},
        ],
      },
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'openGraphImage', type: 'file', title: 'Open Graph Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const socialLinkType = defineType({
  type: 'document',
  name: 'socialLink',
  title: 'Social Link',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'roles',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'role'}]}],
      title: 'Roles',
      hidden: false,
      validation: (Rule) => Rule.max(3),
    }),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'socialLink'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetaData'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const talksType = defineType({
  type: 'document',
  name: 'talks',
  title: 'Talks',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'link',
      hidden: false,
      validation: (Rule) =>
        Rule.required().regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'type',
      type: 'string',
      title: 'Type',
      hidden: false,
      options: {list: ['Live Stream', 'Conference', 'Meetup'], layout: 'dropdown'},
    }),
    defineField({name: 'previewImage', type: 'file', title: 'Preview Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetaDataType = defineType({
  type: 'document',
  name: 'seoMetaData',
  title: 'SEO MetaData',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'ogImage', type: 'file', title: 'OG Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  roleType,
  projectsType,
  blogType,
  socialLinkType,
  pageType,
  talksType,
  seoMetaDataType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > remix.json 2`] = `
"// generated by contentful-to-sanity

export const roleType = {
  type: 'document',
  name: 'role',
  title: 'Role',
  description: '',
  fields: [
    {name: 'roleTitle', type: 'string', title: 'Role Title', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'roleTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const projectsType = {
  type: 'document',
  name: 'projects',
  title: 'Projects',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'desc',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'previewImage',
      type: 'file',
      title: 'Preview Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'link',
      type: 'string',
      title: 'Link',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {name: 'releaseDate', type: 'date', title: 'Release Date', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const blogType = {
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'description', type: 'string', title: 'Description', hidden: false},
    {
      name: 'blogBody',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Blog Body',
      hidden: false,
    },
    {name: 'publishDate', type: 'date', title: 'Publish Date', hidden: false},
    {name: 'slug', type: 'slug', title: 'slug', hidden: false, options: {source: 'title'}},
    {
      name: 'tag',
      type: 'array',
      of: [{type: 'string', options: {list: ['JavaScript', 'GraphQL', 'React', 'Contentful']}}],
      title: 'Tags',
      hidden: false,
      options: {
        list: [
          {value: 'JavaScript', title: 'JavaScript'},
          {value: 'GraphQL', title: 'GraphQL'},
          {value: 'React', title: 'React'},
          {value: 'Contentful', title: 'Contentful'},
        ],
      },
    },
    {
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {name: 'openGraphImage', type: 'file', title: 'Open Graph Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const socialLinkType = {
  type: 'document',
  name: 'socialLink',
  title: 'Social Link',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const pageType = {
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'roles',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'role'}]}],
      title: 'Roles',
      hidden: false,
      validation: (Rule) => Rule.max(3),
    },
    {
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'socialLink'}]}],
      title: 'Links',
      hidden: false,
    },
    {
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetaData'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const talksType = {
  type: 'document',
  name: 'talks',
  title: 'Talks',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'link',
      type: 'string',
      title: 'link',
      hidden: false,
      validation: (Rule) =>
        Rule.required().regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    },
    {
      name: 'type',
      type: 'string',
      title: 'Type',
      hidden: false,
      options: {list: ['Live Stream', 'Conference', 'Meetup'], layout: 'dropdown'},
    },
    {name: 'previewImage', type: 'file', title: 'Preview Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const seoMetaDataType = {
  type: 'document',
  name: 'seoMetaData',
  title: 'SEO MetaData',
  description: '',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'ogImage', type: 'file', title: 'OG Image', hidden: false},
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  roleType,
  projectsType,
  blogType,
  socialLinkType,
  pageType,
  talksType,
  seoMetaDataType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > remix.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const roleType = defineType({
  type: 'document',
  name: 'role',
  title: 'Role',
  description: '',
  fields: [
    defineField({name: 'roleTitle', type: 'string', title: 'Role Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'roleTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const projectsType = defineType({
  type: 'document',
  name: 'projects',
  title: 'Projects',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'desc',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'previewImage',
      type: 'file',
      title: 'Preview Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'Link',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'releaseDate', type: 'date', title: 'Release Date', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'blogBody',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Blog Body',
      hidden: false,
    }),
    defineField({name: 'publishDate', type: 'date', title: 'Publish Date', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'tag',
      type: 'array',
      of: [{type: 'string', options: {list: ['JavaScript', 'GraphQL', 'React', 'Contentful']}}],
      title: 'Tags',
      hidden: false,
      options: {
        list: [
          {value: 'JavaScript', title: 'JavaScript'},
          {value: 'GraphQL', title: 'GraphQL'},
          {value: 'React', title: 'React'},
          {value: 'Contentful', title: 'Contentful'},
        ],
      },
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'openGraphImage', type: 'file', title: 'Open Graph Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const socialLinkType = defineType({
  type: 'document',
  name: 'socialLink',
  title: 'Social Link',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'roles',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'role'}]}],
      title: 'Roles',
      hidden: false,
      validation: (Rule) => Rule.max(3),
    }),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'socialLink'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetaData'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const talksType = defineType({
  type: 'document',
  name: 'talks',
  title: 'Talks',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'link',
      hidden: false,
      validation: (Rule) =>
        Rule.required().regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'type',
      type: 'string',
      title: 'Type',
      hidden: false,
      options: {list: ['Live Stream', 'Conference', 'Meetup'], layout: 'dropdown'},
    }),
    defineField({name: 'previewImage', type: 'file', title: 'Preview Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetaDataType = defineType({
  type: 'document',
  name: 'seoMetaData',
  title: 'SEO MetaData',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'ogImage', type: 'file', title: 'OG Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  roleType,
  projectsType,
  blogType,
  socialLinkType,
  pageType,
  talksType,
  seoMetaDataType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > remix.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const roleType = defineType({
  type: 'document',
  name: 'role',
  title: 'Role',
  description: '',
  fields: [
    defineField({name: 'roleTitle', type: 'string', title: 'Role Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'roleTitle'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const projectsType = defineType({
  type: 'document',
  name: 'projects',
  title: 'Projects',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'desc',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'previewImage',
      type: 'file',
      title: 'Preview Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'Link',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'releaseDate', type: 'date', title: 'Release Date', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Blog',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'description', type: 'string', title: 'Description', hidden: false}),
    defineField({
      name: 'blogBody',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Blog Body',
      hidden: false,
    }),
    defineField({name: 'publishDate', type: 'date', title: 'Publish Date', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'title'},
    }),
    defineField({
      name: 'tag',
      type: 'array',
      of: [{type: 'string', options: {list: ['JavaScript', 'GraphQL', 'React', 'Contentful']}}],
      title: 'Tags',
      hidden: false,
      options: {
        list: [
          {value: 'JavaScript', title: 'JavaScript'},
          {value: 'GraphQL', title: 'GraphQL'},
          {value: 'React', title: 'React'},
          {value: 'Contentful', title: 'Contentful'},
        ],
      },
    }),
    defineField({
      name: 'canonicalUrl',
      type: 'string',
      title: 'Canonical URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({name: 'openGraphImage', type: 'file', title: 'Open Graph Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const socialLinkType = defineType({
  type: 'document',
  name: 'socialLink',
  title: 'Social Link',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'url',
      type: 'string',
      title: 'URL',
      hidden: false,
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'roles',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'role'}]}],
      title: 'Roles',
      hidden: false,
      validation: (Rule) => Rule.max(3),
    }),
    defineField({
      name: 'links',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'socialLink'}]}],
      title: 'Links',
      hidden: false,
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetaData'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const talksType = defineType({
  type: 'document',
  name: 'talks',
  title: 'Talks',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              to: [
                {type: 'role'},
                {type: 'projects'},
                {type: 'blog'},
                {type: 'socialLink'},
                {type: 'page'},
                {type: 'talks'},
                {type: 'seoMetaData'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          to: [
            {type: 'role'},
            {type: 'projects'},
            {type: 'blog'},
            {type: 'socialLink'},
            {type: 'page'},
            {type: 'talks'},
            {type: 'seoMetaData'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'link',
      type: 'string',
      title: 'link',
      hidden: false,
      validation: (Rule) =>
        Rule.required().regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-/]))?$/,
          {invert: false},
        ),
    }),
    defineField({
      name: 'type',
      type: 'string',
      title: 'Type',
      hidden: false,
      options: {list: ['Live Stream', 'Conference', 'Meetup'], layout: 'dropdown'},
    }),
    defineField({name: 'previewImage', type: 'file', title: 'Preview Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetaDataType = defineType({
  type: 'document',
  name: 'seoMetaData',
  title: 'SEO MetaData',
  description: '',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'ogImage', type: 'file', title: 'OG Image', hidden: false}),
    defineField({name: 'description', type: 'text', title: 'Description', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  roleType,
  projectsType,
  blogType,
  socialLinkType,
  pageType,
  talksType,
  seoMetaDataType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > sveltekit.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const employeeType = defineType({
  type: 'document',
  name: 'employee',
  title: 'Employee',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'startDate',
      type: 'datetime',
      title: 'Start Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'jobTitle', type: 'string', title: 'Job Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const officeType = defineType({
  type: 'document',
  name: 'office',
  title: 'Office',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'name'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'employee'}, {type: 'office'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [employeeType, officeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > sveltekit.json 2`] = `
"// generated by contentful-to-sanity

export const employeeType = {
  type: 'document',
  name: 'employee',
  title: 'Employee',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'photo', type: 'file', title: 'Photo', hidden: false},
    {
      name: 'startDate',
      type: 'datetime',
      title: 'Start Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    },
    {name: 'jobTitle', type: 'string', title: 'Job Title', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const officeType = {
  type: 'document',
  name: 'office',
  title: 'Office',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'location', type: 'geopoint', title: 'Location', hidden: false},
    {name: 'photo', type: 'file', title: 'Photo', hidden: false},
    {name: 'slug', type: 'slug', title: 'slug', hidden: false, options: {source: 'name'}},
    {
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  {
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'employee'}, {type: 'office'}],
                  },
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'description',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [employeeType, officeType, breakType]
"
`;

exports[`contentfulToStudioSchema > sveltekit.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const employeeType = defineType({
  type: 'document',
  name: 'employee',
  title: 'Employee',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'startDate',
      type: 'datetime',
      title: 'Start Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'jobTitle', type: 'string', title: 'Job Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const officeType = defineType({
  type: 'document',
  name: 'office',
  title: 'Office',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'name'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'employee'}, {type: 'office'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [employeeType, officeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > sveltekit.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const employeeType = defineType({
  type: 'document',
  name: 'employee',
  title: 'Employee',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'startDate',
      type: 'datetime',
      title: 'Start Date',
      hidden: false,
      options: {timeFormat: 'H:mmZ'},
    }),
    defineField({name: 'jobTitle', type: 'string', title: 'Job Title', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const officeType = defineType({
  type: 'document',
  name: 'office',
  title: 'Office',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'location', type: 'geopoint', title: 'Location', hidden: false}),
    defineField({name: 'photo', type: 'file', title: 'Photo', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'slug',
      hidden: false,
      options: {source: 'name'},
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'employee'}, {type: 'office'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'employee'}, {type: 'office'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'description',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [employeeType, officeType, breakType] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > the-example-app.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description:
    'Categories can be applied to Courses and Lessons. Assigning Multiple categories is also possible.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the category; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this category.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonImageType = defineType({
  type: 'document',
  name: 'lessonImage',
  title: 'Lesson > Image',
  description: 'An image to be used as a module in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCopyType = defineType({
  type: 'document',
  name: 'lessonCopy',
  title: 'Lesson > Copy',
  description: 'A markdown module to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonType = defineType({
  type: 'document',
  name: 'lesson',
  title: 'Lesson',
  description: 'A educational lesson, representing one section of a course.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the lesson; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this lesson.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'modules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'lessonCodeSnippets'}, {type: 'lessonCopy'}, {type: 'lessonImage'}],
        },
      ],
      title: 'Modules',
      hidden: false,
      description: 'Rearrangeable modules that contain the content of this lesson.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutType = defineType({
  type: 'document',
  name: 'layout',
  title: 'Layout',
  description: 'A page consisting of freely configurable and rearrangeable content modules.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the landing page; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this landing page.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'contentModules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'layoutCopy'}, {type: 'layoutHeroImage'}, {type: 'layoutHighlightedCourse'}],
        },
      ],
      title: 'Content Modules',
      hidden: false,
      description:
        'Rearrangeable content chunks representing the actual content of this landing page',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCodeSnippetsType = defineType({
  type: 'document',
  name: 'lessonCodeSnippets',
  title: 'Lesson > Code Snippets',
  description: 'A code snippet module supporting all platforms to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'curl',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'cURL',
      hidden: false,
    }),
    defineField({
      name: 'dotNet',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'DotNet',
      hidden: false,
    }),
    defineField({
      name: 'javascript',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Javascript',
      hidden: false,
    }),
    defineField({
      name: 'java',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java',
      hidden: false,
    }),
    defineField({
      name: 'javaAndroid',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java-android',
      hidden: false,
    }),
    defineField({
      name: 'php',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Php',
      hidden: false,
    }),
    defineField({
      name: 'python',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Python',
      hidden: false,
    }),
    defineField({
      name: 'ruby',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Ruby',
      hidden: false,
    }),
    defineField({
      name: 'swift',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Swift',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const courseType = defineType({
  type: 'document',
  name: 'course',
  title: 'Course',
  description:
    'A series of lessons designed to teach sets of concepts that enable students to master Contentful.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the course; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this course.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      description:
        'This image will be used for teasing the content within the app itself, search engines and on social media.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortDescription',
      type: 'string',
      title: 'Short Description',
      hidden: false,
      description: 'A condensed description, useful for displaying in list views.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      description: 'The copy giving an overview of the course.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'duration',
      type: 'number',
      title: 'Duration',
      hidden: false,
      description: 'The duration, in minutes, it takes to finish this course.',
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      name: 'skillLevel',
      type: 'string',
      title: 'Skill Level',
      hidden: false,
      description:
        \\"The target audiences' level in the learning journey that this course is designed for.\\",
      validation: (Rule) => Rule.required(),
      options: {list: ['beginner', 'intermediate', 'advanced'], layout: 'dropdown'},
    }),
    defineField({
      name: 'lessons',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'lesson'}]}],
      title: 'Lessons',
      hidden: false,
      description: 'The lessons this course consists of.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Specify the categories the course belongs to.',
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutCopyType = defineType({
  type: 'document',
  name: 'layoutCopy',
  title: 'Layout > Copy',
  description:
    'A block of text with a headline and a call to action to be shown on the landing page.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this copy module.',
    }),
    defineField({
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      description: 'The main textual content of this copy module.',
    }),
    defineField({
      name: 'ctaTitle',
      type: 'string',
      title: 'CTA Title',
      hidden: false,
      description: 'The title to be set on the Call to Action button.',
      validation: (Rule) => Rule.min(3),
    }),
    defineField({
      name: 'ctaLink',
      type: 'url',
      title: 'CTA Link',
      hidden: false,
      description: 'The link which the call to action directs your user to.',
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-\\\\/]))?$/,
          {invert: false},
        ).uri({
          allowCredentials: true,
          allowRelative: true,
          relativeOnly: false,
          scheme: [/^http/, /^https/],
        }),
    }),
    defineField({
      name: 'visualStyle',
      type: 'string',
      title: 'Visual Style',
      hidden: false,
      description: 'The visual styling configuration for this module.',
      options: {list: ['Default', 'Emphasized'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHeroImageType = defineType({
  type: 'document',
  name: 'layoutHeroImage',
  title: 'Layout > Hero Image',
  description: 'A hero image and header text.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this hero module. An optional field.',
    }),
    defineField({
      name: 'backgroundImage',
      type: 'file',
      title: 'Background Image',
      hidden: false,
      description: 'Full-size hero image displayed behind the headline.',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHighlightedCourseType = defineType({
  type: 'document',
  name: 'layoutHighlightedCourse',
  title: 'Layout > Highlighted Course',
  description: 'A curated selection of highlighted courses.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'course',
      type: 'reference',
      title: 'Course',
      hidden: false,
      description: 'A curated selection of highlighted courses.',
      validation: (Rule) => Rule.required(),
      to: [{type: 'course'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  categoryType,
  lessonImageType,
  lessonCopyType,
  lessonType,
  layoutType,
  lessonCodeSnippetsType,
  courseType,
  layoutCopyType,
  layoutHeroImageType,
  layoutHighlightedCourseType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > the-example-app.json 2`] = `
"// generated by contentful-to-sanity

export const categoryType = {
  type: 'document',
  name: 'category',
  title: 'Category',
  description:
    'Categories can be applied to Courses and Lessons. Assigning Multiple categories is also possible.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the category; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this category.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const lessonImageType = {
  type: 'document',
  name: 'lessonImage',
  title: 'Lesson > Image',
  description: 'An image to be used as a module in a lesson.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {name: 'caption', type: 'string', title: 'Caption', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const lessonCopyType = {
  type: 'document',
  name: 'lessonCopy',
  title: 'Lesson > Copy',
  description: 'A markdown module to be used in a lesson.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const lessonType = {
  type: 'document',
  name: 'lesson',
  title: 'Lesson',
  description: 'A educational lesson, representing one section of a course.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the lesson; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this lesson.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'modules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'lessonCodeSnippets'}, {type: 'lessonCopy'}, {type: 'lessonImage'}],
        },
      ],
      title: 'Modules',
      hidden: false,
      description: 'Rearrangeable modules that contain the content of this lesson.',
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const layoutType = {
  type: 'document',
  name: 'layout',
  title: 'Layout',
  description: 'A page consisting of freely configurable and rearrangeable content modules.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the landing page; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this landing page.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'contentModules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'layoutCopy'}, {type: 'layoutHeroImage'}, {type: 'layoutHighlightedCourse'}],
        },
      ],
      title: 'Content Modules',
      hidden: false,
      description:
        'Rearrangeable content chunks representing the actual content of this landing page',
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const lessonCodeSnippetsType = {
  type: 'document',
  name: 'lessonCodeSnippets',
  title: 'Lesson > Code Snippets',
  description: 'A code snippet module supporting all platforms to be used in a lesson.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'curl',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'cURL',
      hidden: false,
    },
    {
      name: 'dotNet',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'DotNet',
      hidden: false,
    },
    {
      name: 'javascript',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Javascript',
      hidden: false,
    },
    {
      name: 'java',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java',
      hidden: false,
    },
    {
      name: 'javaAndroid',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java-android',
      hidden: false,
    },
    {
      name: 'php',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Php',
      hidden: false,
    },
    {
      name: 'python',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Python',
      hidden: false,
    },
    {
      name: 'ruby',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Ruby',
      hidden: false,
    },
    {
      name: 'swift',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Swift',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const courseType = {
  type: 'document',
  name: 'course',
  title: 'Course',
  description:
    'A series of lessons designed to teach sets of concepts that enable students to master Contentful.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the course; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this course.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    },
    {
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      description:
        'This image will be used for teasing the content within the app itself, search engines and on social media.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'shortDescription',
      type: 'string',
      title: 'Short Description',
      hidden: false,
      description: 'A condensed description, useful for displaying in list views.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      description: 'The copy giving an overview of the course.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'duration',
      type: 'number',
      title: 'Duration',
      hidden: false,
      description: 'The duration, in minutes, it takes to finish this course.',
      validation: (Rule) => Rule.integer(),
    },
    {
      name: 'skillLevel',
      type: 'string',
      title: 'Skill Level',
      hidden: false,
      description:
        \\"The target audiences' level in the learning journey that this course is designed for.\\",
      validation: (Rule) => Rule.required(),
      options: {list: ['beginner', 'intermediate', 'advanced'], layout: 'dropdown'},
    },
    {
      name: 'lessons',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'lesson'}]}],
      title: 'Lessons',
      hidden: false,
      description: 'The lessons this course consists of.',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Specify the categories the course belongs to.',
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const layoutCopyType = {
  type: 'document',
  name: 'layoutCopy',
  title: 'Layout > Copy',
  description:
    'A block of text with a headline and a call to action to be shown on the landing page.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this copy module.',
    },
    {
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      description: 'The main textual content of this copy module.',
    },
    {
      name: 'ctaTitle',
      type: 'string',
      title: 'CTA Title',
      hidden: false,
      description: 'The title to be set on the Call to Action button.',
      validation: (Rule) => Rule.min(3),
    },
    {
      name: 'ctaLink',
      type: 'url',
      title: 'CTA Link',
      hidden: false,
      description: 'The link which the call to action directs your user to.',
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-\\\\/]))?$/,
          {invert: false},
        ).uri({
          allowCredentials: true,
          allowRelative: true,
          relativeOnly: false,
          scheme: [/^http/, /^https/],
        }),
    },
    {
      name: 'visualStyle',
      type: 'string',
      title: 'Visual Style',
      hidden: false,
      description: 'The visual styling configuration for this module.',
      options: {list: ['Default', 'Emphasized'], layout: 'dropdown'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const layoutHeroImageType = {
  type: 'document',
  name: 'layoutHeroImage',
  title: 'Layout > Hero Image',
  description: 'A hero image and header text.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this hero module. An optional field.',
    },
    {
      name: 'backgroundImage',
      type: 'file',
      title: 'Background Image',
      hidden: false,
      description: 'Full-size hero image displayed behind the headline.',
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const layoutHighlightedCourseType = {
  type: 'document',
  name: 'layoutHighlightedCourse',
  title: 'Layout > Highlighted Course',
  description: 'A curated selection of highlighted courses.',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    },
    {
      name: 'course',
      type: 'reference',
      title: 'Course',
      hidden: false,
      description: 'A curated selection of highlighted courses.',
      validation: (Rule) => Rule.required(),
      to: [{type: 'course'}],
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const types = [
  categoryType,
  lessonImageType,
  lessonCopyType,
  lessonType,
  layoutType,
  lessonCodeSnippetsType,
  courseType,
  layoutCopyType,
  layoutHeroImageType,
  layoutHighlightedCourseType,
]
"
`;

exports[`contentfulToStudioSchema > the-example-app.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description:
    'Categories can be applied to Courses and Lessons. Assigning Multiple categories is also possible.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the category; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this category.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonImageType = defineType({
  type: 'document',
  name: 'lessonImage',
  title: 'Lesson > Image',
  description: 'An image to be used as a module in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCopyType = defineType({
  type: 'document',
  name: 'lessonCopy',
  title: 'Lesson > Copy',
  description: 'A markdown module to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonType = defineType({
  type: 'document',
  name: 'lesson',
  title: 'Lesson',
  description: 'A educational lesson, representing one section of a course.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the lesson; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this lesson.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'modules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'lessonCodeSnippets'}, {type: 'lessonCopy'}, {type: 'lessonImage'}],
        },
      ],
      title: 'Modules',
      hidden: false,
      description: 'Rearrangeable modules that contain the content of this lesson.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutType = defineType({
  type: 'document',
  name: 'layout',
  title: 'Layout',
  description: 'A page consisting of freely configurable and rearrangeable content modules.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the landing page; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this landing page.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'contentModules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'layoutCopy'}, {type: 'layoutHeroImage'}, {type: 'layoutHighlightedCourse'}],
        },
      ],
      title: 'Content Modules',
      hidden: false,
      description:
        'Rearrangeable content chunks representing the actual content of this landing page',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCodeSnippetsType = defineType({
  type: 'document',
  name: 'lessonCodeSnippets',
  title: 'Lesson > Code Snippets',
  description: 'A code snippet module supporting all platforms to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'curl',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'cURL',
      hidden: false,
    }),
    defineField({
      name: 'dotNet',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'DotNet',
      hidden: false,
    }),
    defineField({
      name: 'javascript',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Javascript',
      hidden: false,
    }),
    defineField({
      name: 'java',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java',
      hidden: false,
    }),
    defineField({
      name: 'javaAndroid',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Java-android',
      hidden: false,
    }),
    defineField({
      name: 'php',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Php',
      hidden: false,
    }),
    defineField({
      name: 'python',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Python',
      hidden: false,
    }),
    defineField({
      name: 'ruby',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Ruby',
      hidden: false,
    }),
    defineField({
      name: 'swift',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Swift',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const courseType = defineType({
  type: 'document',
  name: 'course',
  title: 'Course',
  description:
    'A series of lessons designed to teach sets of concepts that enable students to master Contentful.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the course; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this course.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      description:
        'This image will be used for teasing the content within the app itself, search engines and on social media.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortDescription',
      type: 'string',
      title: 'Short Description',
      hidden: false,
      description: 'A condensed description, useful for displaying in list views.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
      description: 'The copy giving an overview of the course.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'duration',
      type: 'number',
      title: 'Duration',
      hidden: false,
      description: 'The duration, in minutes, it takes to finish this course.',
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      name: 'skillLevel',
      type: 'string',
      title: 'Skill Level',
      hidden: false,
      description:
        \\"The target audiences' level in the learning journey that this course is designed for.\\",
      validation: (Rule) => Rule.required(),
      options: {list: ['beginner', 'intermediate', 'advanced'], layout: 'dropdown'},
    }),
    defineField({
      name: 'lessons',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'lesson'}]}],
      title: 'Lessons',
      hidden: false,
      description: 'The lessons this course consists of.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Specify the categories the course belongs to.',
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutCopyType = defineType({
  type: 'document',
  name: 'layoutCopy',
  title: 'Layout > Copy',
  description:
    'A block of text with a headline and a call to action to be shown on the landing page.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this copy module.',
    }),
    defineField({
      name: 'copy',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Copy',
      hidden: false,
      description: 'The main textual content of this copy module.',
    }),
    defineField({
      name: 'ctaTitle',
      type: 'string',
      title: 'CTA Title',
      hidden: false,
      description: 'The title to be set on the Call to Action button.',
      validation: (Rule) => Rule.min(3),
    }),
    defineField({
      name: 'ctaLink',
      type: 'url',
      title: 'CTA Link',
      hidden: false,
      description: 'The link which the call to action directs your user to.',
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-\\\\/]))?$/,
          {invert: false},
        ).uri({
          allowCredentials: true,
          allowRelative: true,
          relativeOnly: false,
          scheme: [/^http/, /^https/],
        }),
    }),
    defineField({
      name: 'visualStyle',
      type: 'string',
      title: 'Visual Style',
      hidden: false,
      description: 'The visual styling configuration for this module.',
      options: {list: ['Default', 'Emphasized'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHeroImageType = defineType({
  type: 'document',
  name: 'layoutHeroImage',
  title: 'Layout > Hero Image',
  description: 'A hero image and header text.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this hero module. An optional field.',
    }),
    defineField({
      name: 'backgroundImage',
      type: 'file',
      title: 'Background Image',
      hidden: false,
      description: 'Full-size hero image displayed behind the headline.',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHighlightedCourseType = defineType({
  type: 'document',
  name: 'layoutHighlightedCourse',
  title: 'Layout > Highlighted Course',
  description: 'A curated selection of highlighted courses.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'course',
      type: 'reference',
      title: 'Course',
      hidden: false,
      description: 'A curated selection of highlighted courses.',
      validation: (Rule) => Rule.required(),
      to: [{type: 'course'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  categoryType,
  lessonImageType,
  lessonCopyType,
  lessonType,
  layoutType,
  lessonCodeSnippetsType,
  courseType,
  layoutCopyType,
  layoutHeroImageType,
  layoutHighlightedCourseType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > the-example-app.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const categoryType = defineType({
  type: 'document',
  name: 'category',
  title: 'Category',
  description:
    'Categories can be applied to Courses and Lessons. Assigning Multiple categories is also possible.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the category; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this category.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonImageType = defineType({
  type: 'document',
  name: 'lessonImage',
  title: 'Lesson > Image',
  description: 'An image to be used as a module in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'caption', type: 'string', title: 'Caption', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCopyType = defineType({
  type: 'document',
  name: 'lessonCopy',
  title: 'Lesson > Copy',
  description: 'A markdown module to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'copy',
      type: 'text',
      title: 'Copy',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonType = defineType({
  type: 'document',
  name: 'lesson',
  title: 'Lesson',
  description: 'A educational lesson, representing one section of a course.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the lesson; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this lesson.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'modules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'lessonCodeSnippets'}, {type: 'lessonCopy'}, {type: 'lessonImage'}],
        },
      ],
      title: 'Modules',
      hidden: false,
      description: 'Rearrangeable modules that contain the content of this lesson.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutType = defineType({
  type: 'document',
  name: 'layout',
  title: 'Layout',
  description: 'A page consisting of freely configurable and rearrangeable content modules.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the landing page; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this landing page.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'contentModules',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{type: 'layoutCopy'}, {type: 'layoutHeroImage'}, {type: 'layoutHighlightedCourse'}],
        },
      ],
      title: 'Content Modules',
      hidden: false,
      description:
        'Rearrangeable content chunks representing the actual content of this landing page',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const lessonCodeSnippetsType = defineType({
  type: 'document',
  name: 'lessonCodeSnippets',
  title: 'Lesson > Code Snippets',
  description: 'A code snippet module supporting all platforms to be used in a lesson.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({name: 'curl', type: 'text', title: 'cURL', hidden: false}),
    defineField({name: 'dotNet', type: 'text', title: 'DotNet', hidden: false}),
    defineField({name: 'javascript', type: 'text', title: 'Javascript', hidden: false}),
    defineField({name: 'java', type: 'text', title: 'Java', hidden: false}),
    defineField({name: 'javaAndroid', type: 'text', title: 'Java-android', hidden: false}),
    defineField({name: 'php', type: 'text', title: 'Php', hidden: false}),
    defineField({name: 'python', type: 'text', title: 'Python', hidden: false}),
    defineField({name: 'ruby', type: 'text', title: 'Ruby', hidden: false}),
    defineField({name: 'swift', type: 'text', title: 'Swift', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const courseType = defineType({
  type: 'document',
  name: 'course',
  title: 'Course',
  description:
    'A series of lessons designed to teach sets of concepts that enable students to master Contentful.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The name of the course; also the title for content editors to find entries in Contentful.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description: 'An autogenerated url-safe and human-readable identifier for this course.',
      validation: (Rule) => Rule.required(),
      options: {source: 'title'},
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Image',
      hidden: false,
      description:
        'This image will be used for teasing the content within the app itself, search engines and on social media.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'shortDescription',
      type: 'string',
      title: 'Short Description',
      hidden: false,
      description: 'A condensed description, useful for displaying in list views.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'description',
      type: 'text',
      title: 'Description',
      hidden: false,
      description: 'The copy giving an overview of the course.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'duration',
      type: 'number',
      title: 'Duration',
      hidden: false,
      description: 'The duration, in minutes, it takes to finish this course.',
      validation: (Rule) => Rule.integer(),
    }),
    defineField({
      name: 'skillLevel',
      type: 'string',
      title: 'Skill Level',
      hidden: false,
      description:
        \\"The target audiences' level in the learning journey that this course is designed for.\\",
      validation: (Rule) => Rule.required(),
      options: {list: ['beginner', 'intermediate', 'advanced'], layout: 'dropdown'},
    }),
    defineField({
      name: 'lessons',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'lesson'}]}],
      title: 'Lessons',
      hidden: false,
      description: 'The lessons this course consists of.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'category'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Specify the categories the course belongs to.',
      validation: (Rule) => Rule.required(),
      options: {layout: 'grid'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutCopyType = defineType({
  type: 'document',
  name: 'layoutCopy',
  title: 'Layout > Copy',
  description:
    'A block of text with a headline and a call to action to be shown on the landing page.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this copy module.',
    }),
    defineField({
      name: 'copy',
      type: 'text',
      title: 'Copy',
      hidden: false,
      description: 'The main textual content of this copy module.',
    }),
    defineField({
      name: 'ctaTitle',
      type: 'string',
      title: 'CTA Title',
      hidden: false,
      description: 'The title to be set on the Call to Action button.',
      validation: (Rule) => Rule.min(3),
    }),
    defineField({
      name: 'ctaLink',
      type: 'url',
      title: 'CTA Link',
      hidden: false,
      description: 'The link which the call to action directs your user to.',
      validation: (Rule) =>
        Rule.regex(
          /^(ftp|http|https):\\\\/\\\\/(\\\\w+:{0,1}\\\\w*@)?(\\\\S+)(:[0-9]+)?(\\\\/|\\\\/([\\\\w#!:.?+=&%@!\\\\-\\\\/]))?$/,
          {invert: false},
        ).uri({
          allowCredentials: true,
          allowRelative: true,
          relativeOnly: false,
          scheme: [/^http/, /^https/],
        }),
    }),
    defineField({
      name: 'visualStyle',
      type: 'string',
      title: 'Visual Style',
      hidden: false,
      description: 'The visual styling configuration for this module.',
      options: {list: ['Default', 'Emphasized'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHeroImageType = defineType({
  type: 'document',
  name: 'layoutHeroImage',
  title: 'Layout > Hero Image',
  description: 'A hero image and header text.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'headline',
      type: 'string',
      title: 'Headline',
      hidden: false,
      description: 'The short, emphasized headline of this hero module. An optional field.',
    }),
    defineField({
      name: 'backgroundImage',
      type: 'file',
      title: 'Background Image',
      hidden: false,
      description: 'Full-size hero image displayed behind the headline.',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const layoutHighlightedCourseType = defineType({
  type: 'document',
  name: 'layoutHighlightedCourse',
  title: 'Layout > Highlighted Course',
  description: 'A curated selection of highlighted courses.',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description:
        'The title for content editors to find entries in Contentful. It is not necessarily relevant for display in connected applications.',
      validation: (Rule) => Rule.required().regex(/.+>.+/, {invert: false}),
    }),
    defineField({
      name: 'course',
      type: 'reference',
      title: 'Course',
      hidden: false,
      description: 'A curated selection of highlighted courses.',
      validation: (Rule) => Rule.required(),
      to: [{type: 'course'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const types = [
  categoryType,
  lessonImageType,
  lessonCopyType,
  lessonType,
  layoutType,
  lessonCodeSnippetsType,
  courseType,
  layoutCopyType,
  layoutHeroImageType,
  layoutHighlightedCourseType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > workflow.json 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > workflow.json 2`] = `
"// generated by contentful-to-sanity

export const heroImageType = {
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'image', type: 'image', title: 'Image', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const seoMetadataType = {
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'Title', hidden: false},
    {name: 'image', type: 'file', title: 'Image', hidden: false},
    {
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    },
    {
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    },
    {name: 'author', type: 'string', title: 'Author', hidden: false},
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const specialOfferLandingPageType = {
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    },
    {name: 'hero', type: 'reference', title: 'Hero', hidden: false, to: [{type: 'heroImage'}]},
    {
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    },
    {
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    },
    {
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const specialOfferType = {
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    {name: 'name', type: 'string', title: 'Name', hidden: false},
    {name: 'headline', type: 'string', title: 'Headline', hidden: false},
    {
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
]
"
`;

exports[`contentfulToStudioSchema > workflow.json 3`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      name: 'description',
      type: 'array',
      of: [{type: 'block'}, {type: 'image'}],
      title: 'Description',
      hidden: false,
    }),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;

exports[`contentfulToStudioSchema > workflow.json 4`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const heroImageType = defineType({
  type: 'document',
  name: 'heroImage',
  title: 'Hero Image',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'image', type: 'image', title: 'Image', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const seoMetadataType = defineType({
  type: 'document',
  name: 'seoMetadata',
  title: 'SEO Metadata',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({name: 'description', type: 'text', title: 'Description', hidden: false}),
    defineField({
      name: 'keywords',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Keywords',
      hidden: false,
      options: {layout: 'tag'},
    }),
    defineField({name: 'author', type: 'string', title: 'Author', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferLandingPageType = defineType({
  type: 'document',
  name: 'specialOfferLandingPage',
  title: 'Special Offer Landing Page',
  description: 'A landing page with promotional items needing legal approval',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'seoMetadata',
      type: 'reference',
      title: 'SEO Metadata',
      hidden: false,
      to: [{type: 'seoMetadata'}],
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      to: [{type: 'heroImage'}],
    }),
    defineField({
      name: 'spoffer',
      type: 'reference',
      title: 'Offer',
      hidden: false,
      to: [{type: 'specialOffer'}],
    }),
    defineField({
      name: 'reviewState',
      type: 'string',
      title: 'Review State',
      hidden: false,
      options: {
        list: ['Needs review', 'Needs changes', 'Needs Legal Review', 'Ready to publish'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'legalApproval',
      type: 'string',
      title: 'Legal Approval',
      hidden: false,
      validation: (Rule) => Rule.required(),
      options: {list: ['Yes'], layout: 'radio'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const specialOfferType = defineType({
  type: 'document',
  name: 'specialOffer',
  title: 'Special Offer',
  description: 'The body of text used in special offers',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({name: 'headline', type: 'string', title: 'Headline', hidden: false}),
    defineField({
      name: 'offerBody',
      type: 'array',
      of: [{type: 'block', marks: {decorators: [], annotations: []}}],
      title: 'Offer Body',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [
  heroImageType,
  seoMetadataType,
  specialOfferLandingPageType,
  specialOfferType,
  breakType,
] satisfies SchemaTypeDefinition[]
"
`;
