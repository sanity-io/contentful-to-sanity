// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Archived content entities > generated document schemas have readOnly function that reads contentfulArchived field, JS 1`] = `
"// generated by contentful-to-sanity

export const personType = {
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  {type: 'reference', name: 'reference', to: [{type: 'person'}, {type: 'post'}]},
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    },
    {
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    },
    {
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const postType = {
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    {name: 'title', type: 'string', title: 'title', hidden: false},
    {
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    },
    {
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  {
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  },
                  {
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  },
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  {type: 'reference', name: 'reference', to: [{type: 'person'}, {type: 'post'}]},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'body',
      hidden: false,
    },
    {
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    },
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
}

export const breakType = {
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    {
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    },
  ],
}

export const types = [personType, postType, breakType]
"
`;

exports[`Archived content entities > generated document schemas have readOnly function that reads contentfulArchived field, TS 1`] = `
"// generated by contentful-to-sanity
import {defineField, defineType, type SchemaTypeDefinition} from 'sanity'

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Person',
  description: 'A human being',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'name',
      hidden: false,
      description: 'Persons given, or preferred name',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'profilePicture',
      type: 'file',
      title: 'profilePicture',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'biography',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [{title: 'Quote', value: 'blockquote'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'person'}, {type: 'post'}],
                  }),
                ],
              },
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'biography',
      hidden: false,
    }),
    defineField({
      name: 'friend',
      type: 'reference',
      title: 'friend',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      name: 'friends',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'person'}, {type: 'post'}]}],
      title: 'friends',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const postType = defineType({
  type: 'document',
  name: 'post',
  title: 'Post',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'title', hidden: false}),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'author',
      hidden: false,
      to: [{type: 'person'}, {type: 'post'}],
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
              {title: 'Code', value: 'pre'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'object',
                name: 'internalLink',
                title: 'Internal link',
                fields: [
                  defineField({
                    type: 'reference',
                    name: 'reference',
                    to: [{type: 'person'}, {type: 'post'}],
                  }),
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]}],
        },
        {type: 'reference', title: 'Reference', to: [{type: 'person'}, {type: 'post'}]},
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'body',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => document?.contentfulArchived === true,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const types = [personType, postType, breakType] satisfies SchemaTypeDefinition[]
"
`;
